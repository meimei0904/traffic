
traffic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bd0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002cdc  08002cdc  00012cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d00  08002d00  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d00  08002d00  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d00  08002d00  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d00  08002d00  00012d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d04  08002d04  00012d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002d08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000001c  08002d24  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08002d24  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097fc  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b42  00000000  00000000  00029841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  0002b388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  0002bdf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ad1  00000000  00000000  0002c780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b64a  00000000  00000000  00043251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082561  00000000  00000000  0004e89b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0dfc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029cc  00000000  00000000  000d0e50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002cc4 	.word	0x08002cc4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08002cc4 	.word	0x08002cc4

0800014c <UpdateMode>:
#include "input_processing.h"

enum ButtonState{BUTTON_RELEASED, BUTTON_PRESSED, BUTTON_PRESSED_MORE_THAN_1_SECOND};
enum ButtonState buttonState[3] = {BUTTON_RELEASED};

void UpdateMode() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch (buttonState[0]) {
 8000150:	4b16      	ldr	r3, [pc, #88]	; (80001ac <UpdateMode+0x60>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	2b00      	cmp	r3, #0
 8000156:	d002      	beq.n	800015e <UpdateMode+0x12>
 8000158:	2b01      	cmp	r3, #1
 800015a:	d018      	beq.n	800018e <UpdateMode+0x42>
			if (!is_button_pressed(0)) {
				buttonState[0] = BUTTON_RELEASED;
			}
			break;
		default:
			break;
 800015c:	e024      	b.n	80001a8 <UpdateMode+0x5c>
			if (is_button_pressed(0)) {
 800015e:	2000      	movs	r0, #0
 8000160:	f000 fa46 	bl	80005f0 <is_button_pressed>
 8000164:	4603      	mov	r3, r0
 8000166:	2b00      	cmp	r3, #0
 8000168:	d01b      	beq.n	80001a2 <UpdateMode+0x56>
				buttonState[0] = BUTTON_PRESSED;
 800016a:	4b10      	ldr	r3, [pc, #64]	; (80001ac <UpdateMode+0x60>)
 800016c:	2201      	movs	r2, #1
 800016e:	701a      	strb	r2, [r3, #0]
				mode++;
 8000170:	4b0f      	ldr	r3, [pc, #60]	; (80001b0 <UpdateMode+0x64>)
 8000172:	681b      	ldr	r3, [r3, #0]
 8000174:	3301      	adds	r3, #1
 8000176:	4a0e      	ldr	r2, [pc, #56]	; (80001b0 <UpdateMode+0x64>)
 8000178:	6013      	str	r3, [r2, #0]
				if (mode > 4) {
 800017a:	4b0d      	ldr	r3, [pc, #52]	; (80001b0 <UpdateMode+0x64>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	2b04      	cmp	r3, #4
 8000180:	dd0f      	ble.n	80001a2 <UpdateMode+0x56>
					mode = 1;
 8000182:	4b0b      	ldr	r3, [pc, #44]	; (80001b0 <UpdateMode+0x64>)
 8000184:	2201      	movs	r2, #1
 8000186:	601a      	str	r2, [r3, #0]
					resetCountValue();
 8000188:	f000 fc20 	bl	80009cc <resetCountValue>
			break;
 800018c:	e009      	b.n	80001a2 <UpdateMode+0x56>
			if (!is_button_pressed(0)) {
 800018e:	2000      	movs	r0, #0
 8000190:	f000 fa2e 	bl	80005f0 <is_button_pressed>
 8000194:	4603      	mov	r3, r0
 8000196:	2b00      	cmp	r3, #0
 8000198:	d105      	bne.n	80001a6 <UpdateMode+0x5a>
				buttonState[0] = BUTTON_RELEASED;
 800019a:	4b04      	ldr	r3, [pc, #16]	; (80001ac <UpdateMode+0x60>)
 800019c:	2200      	movs	r2, #0
 800019e:	701a      	strb	r2, [r3, #0]
			break;
 80001a0:	e001      	b.n	80001a6 <UpdateMode+0x5a>
			break;
 80001a2:	bf00      	nop
 80001a4:	e000      	b.n	80001a8 <UpdateMode+0x5c>
			break;
 80001a6:	bf00      	nop
	}
}
 80001a8:	bf00      	nop
 80001aa:	bd80      	pop	{r7, pc}
 80001ac:	20000038 	.word	0x20000038
 80001b0:	2000000c 	.word	0x2000000c

080001b4 <increaseDraftValue>:

static void increaseDraftValue() {
 80001b4:	b480      	push	{r7}
 80001b6:	af00      	add	r7, sp, #0
	switch (mode) {
 80001b8:	4b1e      	ldr	r3, [pc, #120]	; (8000234 <increaseDraftValue+0x80>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	2b04      	cmp	r3, #4
 80001be:	d020      	beq.n	8000202 <increaseDraftValue+0x4e>
 80001c0:	2b04      	cmp	r3, #4
 80001c2:	dc2b      	bgt.n	800021c <increaseDraftValue+0x68>
 80001c4:	2b02      	cmp	r3, #2
 80001c6:	d002      	beq.n	80001ce <increaseDraftValue+0x1a>
 80001c8:	2b03      	cmp	r3, #3
 80001ca:	d00d      	beq.n	80001e8 <increaseDraftValue+0x34>
		case 4:
			green_draft++;
			if (green_draft > 99) green_draft = 0;
			break;
		default:
			break;
 80001cc:	e026      	b.n	800021c <increaseDraftValue+0x68>
			red_draft++;
 80001ce:	4b1a      	ldr	r3, [pc, #104]	; (8000238 <increaseDraftValue+0x84>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	3301      	adds	r3, #1
 80001d4:	4a18      	ldr	r2, [pc, #96]	; (8000238 <increaseDraftValue+0x84>)
 80001d6:	6013      	str	r3, [r2, #0]
			if (red_draft > 99) red_draft = 0;
 80001d8:	4b17      	ldr	r3, [pc, #92]	; (8000238 <increaseDraftValue+0x84>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	2b63      	cmp	r3, #99	; 0x63
 80001de:	dd1f      	ble.n	8000220 <increaseDraftValue+0x6c>
 80001e0:	4b15      	ldr	r3, [pc, #84]	; (8000238 <increaseDraftValue+0x84>)
 80001e2:	2200      	movs	r2, #0
 80001e4:	601a      	str	r2, [r3, #0]
			break;
 80001e6:	e01b      	b.n	8000220 <increaseDraftValue+0x6c>
			yellow_draft++;
 80001e8:	4b14      	ldr	r3, [pc, #80]	; (800023c <increaseDraftValue+0x88>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	3301      	adds	r3, #1
 80001ee:	4a13      	ldr	r2, [pc, #76]	; (800023c <increaseDraftValue+0x88>)
 80001f0:	6013      	str	r3, [r2, #0]
			if (yellow_draft > 99) yellow_draft = 0;
 80001f2:	4b12      	ldr	r3, [pc, #72]	; (800023c <increaseDraftValue+0x88>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	2b63      	cmp	r3, #99	; 0x63
 80001f8:	dd14      	ble.n	8000224 <increaseDraftValue+0x70>
 80001fa:	4b10      	ldr	r3, [pc, #64]	; (800023c <increaseDraftValue+0x88>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	601a      	str	r2, [r3, #0]
			break;
 8000200:	e010      	b.n	8000224 <increaseDraftValue+0x70>
			green_draft++;
 8000202:	4b0f      	ldr	r3, [pc, #60]	; (8000240 <increaseDraftValue+0x8c>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	3301      	adds	r3, #1
 8000208:	4a0d      	ldr	r2, [pc, #52]	; (8000240 <increaseDraftValue+0x8c>)
 800020a:	6013      	str	r3, [r2, #0]
			if (green_draft > 99) green_draft = 0;
 800020c:	4b0c      	ldr	r3, [pc, #48]	; (8000240 <increaseDraftValue+0x8c>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	2b63      	cmp	r3, #99	; 0x63
 8000212:	dd09      	ble.n	8000228 <increaseDraftValue+0x74>
 8000214:	4b0a      	ldr	r3, [pc, #40]	; (8000240 <increaseDraftValue+0x8c>)
 8000216:	2200      	movs	r2, #0
 8000218:	601a      	str	r2, [r3, #0]
			break;
 800021a:	e005      	b.n	8000228 <increaseDraftValue+0x74>
			break;
 800021c:	bf00      	nop
 800021e:	e004      	b.n	800022a <increaseDraftValue+0x76>
			break;
 8000220:	bf00      	nop
 8000222:	e002      	b.n	800022a <increaseDraftValue+0x76>
			break;
 8000224:	bf00      	nop
 8000226:	e000      	b.n	800022a <increaseDraftValue+0x76>
			break;
 8000228:	bf00      	nop
	}
}
 800022a:	bf00      	nop
 800022c:	46bd      	mov	sp, r7
 800022e:	bc80      	pop	{r7}
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	2000000c 	.word	0x2000000c
 8000238:	2000009c 	.word	0x2000009c
 800023c:	2000008c 	.word	0x2000008c
 8000240:	20000094 	.word	0x20000094

08000244 <setDurationValue>:

static void setDurationValue() {
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
	int diff = 0;
 800024a:	2300      	movs	r3, #0
 800024c:	607b      	str	r3, [r7, #4]
	switch (mode) {
 800024e:	4b2b      	ldr	r3, [pc, #172]	; (80002fc <setDurationValue+0xb8>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	2b04      	cmp	r3, #4
 8000254:	d034      	beq.n	80002c0 <setDurationValue+0x7c>
 8000256:	2b04      	cmp	r3, #4
 8000258:	dc49      	bgt.n	80002ee <setDurationValue+0xaa>
 800025a:	2b02      	cmp	r3, #2
 800025c:	d002      	beq.n	8000264 <setDurationValue+0x20>
 800025e:	2b03      	cmp	r3, #3
 8000260:	d017      	beq.n	8000292 <setDurationValue+0x4e>
			green_value = green_draft;
			green_value += diff;
			green_draft += diff;
			break;
		default:
			break;
 8000262:	e044      	b.n	80002ee <setDurationValue+0xaa>
			diff = red_draft - red_value;
 8000264:	4b26      	ldr	r3, [pc, #152]	; (8000300 <setDurationValue+0xbc>)
 8000266:	681a      	ldr	r2, [r3, #0]
 8000268:	4b26      	ldr	r3, [pc, #152]	; (8000304 <setDurationValue+0xc0>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	1ad3      	subs	r3, r2, r3
 800026e:	607b      	str	r3, [r7, #4]
			red_value = red_draft;
 8000270:	4b23      	ldr	r3, [pc, #140]	; (8000300 <setDurationValue+0xbc>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a23      	ldr	r2, [pc, #140]	; (8000304 <setDurationValue+0xc0>)
 8000276:	6013      	str	r3, [r2, #0]
			green_value += diff;
 8000278:	4b23      	ldr	r3, [pc, #140]	; (8000308 <setDurationValue+0xc4>)
 800027a:	681a      	ldr	r2, [r3, #0]
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	4413      	add	r3, r2
 8000280:	4a21      	ldr	r2, [pc, #132]	; (8000308 <setDurationValue+0xc4>)
 8000282:	6013      	str	r3, [r2, #0]
			green_draft += diff;
 8000284:	4b21      	ldr	r3, [pc, #132]	; (800030c <setDurationValue+0xc8>)
 8000286:	681a      	ldr	r2, [r3, #0]
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	4413      	add	r3, r2
 800028c:	4a1f      	ldr	r2, [pc, #124]	; (800030c <setDurationValue+0xc8>)
 800028e:	6013      	str	r3, [r2, #0]
			break;
 8000290:	e02e      	b.n	80002f0 <setDurationValue+0xac>
			diff = yellow_draft - yellow_value;
 8000292:	4b1f      	ldr	r3, [pc, #124]	; (8000310 <setDurationValue+0xcc>)
 8000294:	681a      	ldr	r2, [r3, #0]
 8000296:	4b1f      	ldr	r3, [pc, #124]	; (8000314 <setDurationValue+0xd0>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	1ad3      	subs	r3, r2, r3
 800029c:	607b      	str	r3, [r7, #4]
			yellow_value = yellow_draft;
 800029e:	4b1c      	ldr	r3, [pc, #112]	; (8000310 <setDurationValue+0xcc>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	4a1c      	ldr	r2, [pc, #112]	; (8000314 <setDurationValue+0xd0>)
 80002a4:	6013      	str	r3, [r2, #0]
			red_value += diff;
 80002a6:	4b17      	ldr	r3, [pc, #92]	; (8000304 <setDurationValue+0xc0>)
 80002a8:	681a      	ldr	r2, [r3, #0]
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4413      	add	r3, r2
 80002ae:	4a15      	ldr	r2, [pc, #84]	; (8000304 <setDurationValue+0xc0>)
 80002b0:	6013      	str	r3, [r2, #0]
			red_draft += diff;
 80002b2:	4b13      	ldr	r3, [pc, #76]	; (8000300 <setDurationValue+0xbc>)
 80002b4:	681a      	ldr	r2, [r3, #0]
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	4413      	add	r3, r2
 80002ba:	4a11      	ldr	r2, [pc, #68]	; (8000300 <setDurationValue+0xbc>)
 80002bc:	6013      	str	r3, [r2, #0]
			break;
 80002be:	e017      	b.n	80002f0 <setDurationValue+0xac>
			diff = green_draft - green_value;
 80002c0:	4b12      	ldr	r3, [pc, #72]	; (800030c <setDurationValue+0xc8>)
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	4b10      	ldr	r3, [pc, #64]	; (8000308 <setDurationValue+0xc4>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	1ad3      	subs	r3, r2, r3
 80002ca:	607b      	str	r3, [r7, #4]
			green_value = green_draft;
 80002cc:	4b0f      	ldr	r3, [pc, #60]	; (800030c <setDurationValue+0xc8>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a0d      	ldr	r2, [pc, #52]	; (8000308 <setDurationValue+0xc4>)
 80002d2:	6013      	str	r3, [r2, #0]
			green_value += diff;
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <setDurationValue+0xc4>)
 80002d6:	681a      	ldr	r2, [r3, #0]
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	4413      	add	r3, r2
 80002dc:	4a0a      	ldr	r2, [pc, #40]	; (8000308 <setDurationValue+0xc4>)
 80002de:	6013      	str	r3, [r2, #0]
			green_draft += diff;
 80002e0:	4b0a      	ldr	r3, [pc, #40]	; (800030c <setDurationValue+0xc8>)
 80002e2:	681a      	ldr	r2, [r3, #0]
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	4413      	add	r3, r2
 80002e8:	4a08      	ldr	r2, [pc, #32]	; (800030c <setDurationValue+0xc8>)
 80002ea:	6013      	str	r3, [r2, #0]
			break;
 80002ec:	e000      	b.n	80002f0 <setDurationValue+0xac>
			break;
 80002ee:	bf00      	nop
	}
}
 80002f0:	bf00      	nop
 80002f2:	370c      	adds	r7, #12
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bc80      	pop	{r7}
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	2000000c 	.word	0x2000000c
 8000300:	2000009c 	.word	0x2000009c
 8000304:	20000088 	.word	0x20000088
 8000308:	20000090 	.word	0x20000090
 800030c:	20000094 	.word	0x20000094
 8000310:	2000008c 	.word	0x2000008c
 8000314:	20000098 	.word	0x20000098

08000318 <UpdateDurationValue>:

void UpdateDurationValue() {
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	switch (buttonState[1]) {
 800031c:	4b34      	ldr	r3, [pc, #208]	; (80003f0 <UpdateDurationValue+0xd8>)
 800031e:	785b      	ldrb	r3, [r3, #1]
 8000320:	2b02      	cmp	r3, #2
 8000322:	d027      	beq.n	8000374 <UpdateDurationValue+0x5c>
 8000324:	2b02      	cmp	r3, #2
 8000326:	dc3a      	bgt.n	800039e <UpdateDurationValue+0x86>
 8000328:	2b00      	cmp	r3, #0
 800032a:	d002      	beq.n	8000332 <UpdateDurationValue+0x1a>
 800032c:	2b01      	cmp	r3, #1
 800032e:	d00c      	beq.n	800034a <UpdateDurationValue+0x32>
				reset_flagForButtonHold(1);
				increaseDraftValue();
			}
			break;
		default:
			break;
 8000330:	e035      	b.n	800039e <UpdateDurationValue+0x86>
			if (is_button_pressed(1)) {
 8000332:	2001      	movs	r0, #1
 8000334:	f000 f95c 	bl	80005f0 <is_button_pressed>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d031      	beq.n	80003a2 <UpdateDurationValue+0x8a>
				buttonState[1] = BUTTON_PRESSED;
 800033e:	4b2c      	ldr	r3, [pc, #176]	; (80003f0 <UpdateDurationValue+0xd8>)
 8000340:	2201      	movs	r2, #1
 8000342:	705a      	strb	r2, [r3, #1]
				increaseDraftValue();
 8000344:	f7ff ff36 	bl	80001b4 <increaseDraftValue>
			break;
 8000348:	e02b      	b.n	80003a2 <UpdateDurationValue+0x8a>
			if (!is_button_pressed(1)) {
 800034a:	2001      	movs	r0, #1
 800034c:	f000 f950 	bl	80005f0 <is_button_pressed>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d102      	bne.n	800035c <UpdateDurationValue+0x44>
				buttonState[1] = BUTTON_RELEASED;
 8000356:	4b26      	ldr	r3, [pc, #152]	; (80003f0 <UpdateDurationValue+0xd8>)
 8000358:	2200      	movs	r2, #0
 800035a:	705a      	strb	r2, [r3, #1]
			if (is_button_pressed_1s(1)) {
 800035c:	2001      	movs	r0, #1
 800035e:	f000 f961 	bl	8000624 <is_button_pressed_1s>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d01e      	beq.n	80003a6 <UpdateDurationValue+0x8e>
				buttonState[1] = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000368:	4b21      	ldr	r3, [pc, #132]	; (80003f0 <UpdateDurationValue+0xd8>)
 800036a:	2202      	movs	r2, #2
 800036c:	705a      	strb	r2, [r3, #1]
				increaseDraftValue();
 800036e:	f7ff ff21 	bl	80001b4 <increaseDraftValue>
			break;
 8000372:	e018      	b.n	80003a6 <UpdateDurationValue+0x8e>
			if (!is_button_pressed(1)) {
 8000374:	2001      	movs	r0, #1
 8000376:	f000 f93b 	bl	80005f0 <is_button_pressed>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d102      	bne.n	8000386 <UpdateDurationValue+0x6e>
				buttonState[1] = BUTTON_RELEASED;
 8000380:	4b1b      	ldr	r3, [pc, #108]	; (80003f0 <UpdateDurationValue+0xd8>)
 8000382:	2200      	movs	r2, #0
 8000384:	705a      	strb	r2, [r3, #1]
			if (is_button_held(1)) {
 8000386:	2001      	movs	r0, #1
 8000388:	f000 f966 	bl	8000658 <is_button_held>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d00b      	beq.n	80003aa <UpdateDurationValue+0x92>
				reset_flagForButtonHold(1);
 8000392:	2001      	movs	r0, #1
 8000394:	f000 f97a 	bl	800068c <reset_flagForButtonHold>
				increaseDraftValue();
 8000398:	f7ff ff0c 	bl	80001b4 <increaseDraftValue>
			break;
 800039c:	e005      	b.n	80003aa <UpdateDurationValue+0x92>
			break;
 800039e:	bf00      	nop
 80003a0:	e004      	b.n	80003ac <UpdateDurationValue+0x94>
			break;
 80003a2:	bf00      	nop
 80003a4:	e002      	b.n	80003ac <UpdateDurationValue+0x94>
			break;
 80003a6:	bf00      	nop
 80003a8:	e000      	b.n	80003ac <UpdateDurationValue+0x94>
			break;
 80003aa:	bf00      	nop
	}

	switch (buttonState[2]) {
 80003ac:	4b10      	ldr	r3, [pc, #64]	; (80003f0 <UpdateDurationValue+0xd8>)
 80003ae:	789b      	ldrb	r3, [r3, #2]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d002      	beq.n	80003ba <UpdateDurationValue+0xa2>
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d00c      	beq.n	80003d2 <UpdateDurationValue+0xba>
			if (!is_button_pressed(2)) {
				buttonState[2] = BUTTON_RELEASED;
			}
			break;
		default:
			break;
 80003b8:	e018      	b.n	80003ec <UpdateDurationValue+0xd4>
			if (is_button_pressed(2)) {
 80003ba:	2002      	movs	r0, #2
 80003bc:	f000 f918 	bl	80005f0 <is_button_pressed>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d00f      	beq.n	80003e6 <UpdateDurationValue+0xce>
				buttonState[2] = BUTTON_PRESSED;
 80003c6:	4b0a      	ldr	r3, [pc, #40]	; (80003f0 <UpdateDurationValue+0xd8>)
 80003c8:	2201      	movs	r2, #1
 80003ca:	709a      	strb	r2, [r3, #2]
				setDurationValue();
 80003cc:	f7ff ff3a 	bl	8000244 <setDurationValue>
			break;
 80003d0:	e009      	b.n	80003e6 <UpdateDurationValue+0xce>
			if (!is_button_pressed(2)) {
 80003d2:	2002      	movs	r0, #2
 80003d4:	f000 f90c 	bl	80005f0 <is_button_pressed>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d105      	bne.n	80003ea <UpdateDurationValue+0xd2>
				buttonState[2] = BUTTON_RELEASED;
 80003de:	4b04      	ldr	r3, [pc, #16]	; (80003f0 <UpdateDurationValue+0xd8>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	709a      	strb	r2, [r3, #2]
			break;
 80003e4:	e001      	b.n	80003ea <UpdateDurationValue+0xd2>
			break;
 80003e6:	bf00      	nop
 80003e8:	e000      	b.n	80003ec <UpdateDurationValue+0xd4>
			break;
 80003ea:	bf00      	nop
	}
}
 80003ec:	bf00      	nop
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	20000038 	.word	0x20000038

080003f4 <init_buffer>:
static uint8_t flagForButtonPress1s[NO_OF_BUTTONS];
static uint8_t flagForButtonHold[NO_OF_BUTTONS];
static uint16_t counterForButtonPress1s[NO_OF_BUTTONS];
static uint16_t counterForButtonHold[NO_OF_BUTTONS];

void init_buffer() {
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
	for (int i = 0; i < NO_OF_BUTTONS; i++) {
 80003fa:	2300      	movs	r3, #0
 80003fc:	607b      	str	r3, [r7, #4]
 80003fe:	e02a      	b.n	8000456 <init_buffer+0x62>
		buttonBuffer[i] = BUTTON_IS_RELEASED;
 8000400:	4a19      	ldr	r2, [pc, #100]	; (8000468 <init_buffer+0x74>)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	4413      	add	r3, r2
 8000406:	2201      	movs	r2, #1
 8000408:	701a      	strb	r2, [r3, #0]
		debounceButtonBufer1[i] = BUTTON_IS_RELEASED;
 800040a:	4a18      	ldr	r2, [pc, #96]	; (800046c <init_buffer+0x78>)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	4413      	add	r3, r2
 8000410:	2201      	movs	r2, #1
 8000412:	701a      	strb	r2, [r3, #0]
		debounceButtonBufer2[i] = BUTTON_IS_RELEASED;
 8000414:	4a16      	ldr	r2, [pc, #88]	; (8000470 <init_buffer+0x7c>)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4413      	add	r3, r2
 800041a:	2201      	movs	r2, #1
 800041c:	701a      	strb	r2, [r3, #0]
		debounceButtonBufer3[i] = BUTTON_IS_RELEASED;
 800041e:	4a15      	ldr	r2, [pc, #84]	; (8000474 <init_buffer+0x80>)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4413      	add	r3, r2
 8000424:	2201      	movs	r2, #1
 8000426:	701a      	strb	r2, [r3, #0]
		flagForButtonPress1s[i] = 0;
 8000428:	4a13      	ldr	r2, [pc, #76]	; (8000478 <init_buffer+0x84>)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4413      	add	r3, r2
 800042e:	2200      	movs	r2, #0
 8000430:	701a      	strb	r2, [r3, #0]
		flagForButtonHold[i] = 0;
 8000432:	4a12      	ldr	r2, [pc, #72]	; (800047c <init_buffer+0x88>)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	4413      	add	r3, r2
 8000438:	2200      	movs	r2, #0
 800043a:	701a      	strb	r2, [r3, #0]
		counterForButtonPress1s[i] = 0;
 800043c:	4a10      	ldr	r2, [pc, #64]	; (8000480 <init_buffer+0x8c>)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	2100      	movs	r1, #0
 8000442:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		counterForButtonHold[i] = 0;
 8000446:	4a0f      	ldr	r2, [pc, #60]	; (8000484 <init_buffer+0x90>)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	2100      	movs	r1, #0
 800044c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < NO_OF_BUTTONS; i++) {
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	3301      	adds	r3, #1
 8000454:	607b      	str	r3, [r7, #4]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	2b02      	cmp	r3, #2
 800045a:	ddd1      	ble.n	8000400 <init_buffer+0xc>
	}
}
 800045c:	bf00      	nop
 800045e:	bf00      	nop
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr
 8000468:	2000003c 	.word	0x2000003c
 800046c:	20000040 	.word	0x20000040
 8000470:	20000044 	.word	0x20000044
 8000474:	20000048 	.word	0x20000048
 8000478:	2000004c 	.word	0x2000004c
 800047c:	20000050 	.word	0x20000050
 8000480:	20000054 	.word	0x20000054
 8000484:	2000005c 	.word	0x2000005c

08000488 <button_reading>:

void button_reading(void) {
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NO_OF_BUTTONS; i++) {
 800048e:	2300      	movs	r3, #0
 8000490:	607b      	str	r3, [r7, #4]
 8000492:	e092      	b.n	80005ba <button_reading+0x132>
		debounceButtonBufer3[i] = debounceButtonBufer2[i];
 8000494:	4a4d      	ldr	r2, [pc, #308]	; (80005cc <button_reading+0x144>)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4413      	add	r3, r2
 800049a:	7819      	ldrb	r1, [r3, #0]
 800049c:	4a4c      	ldr	r2, [pc, #304]	; (80005d0 <button_reading+0x148>)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4413      	add	r3, r2
 80004a2:	460a      	mov	r2, r1
 80004a4:	701a      	strb	r2, [r3, #0]
		debounceButtonBufer2[i] = debounceButtonBufer1[i];
 80004a6:	4a4b      	ldr	r2, [pc, #300]	; (80005d4 <button_reading+0x14c>)
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	4413      	add	r3, r2
 80004ac:	7819      	ldrb	r1, [r3, #0]
 80004ae:	4a47      	ldr	r2, [pc, #284]	; (80005cc <button_reading+0x144>)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	4413      	add	r3, r2
 80004b4:	460a      	mov	r2, r1
 80004b6:	701a      	strb	r2, [r3, #0]
		debounceButtonBufer1[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, (1U << i));
 80004b8:	2201      	movs	r2, #1
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	fa02 f303 	lsl.w	r3, r2, r3
 80004c0:	b29b      	uxth	r3, r3
 80004c2:	4619      	mov	r1, r3
 80004c4:	4844      	ldr	r0, [pc, #272]	; (80005d8 <button_reading+0x150>)
 80004c6:	f001 fbd1 	bl	8001c6c <HAL_GPIO_ReadPin>
 80004ca:	4603      	mov	r3, r0
 80004cc:	4619      	mov	r1, r3
 80004ce:	4a41      	ldr	r2, [pc, #260]	; (80005d4 <button_reading+0x14c>)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	4413      	add	r3, r2
 80004d4:	460a      	mov	r2, r1
 80004d6:	701a      	strb	r2, [r3, #0]

		if (debounceButtonBufer1[i] == debounceButtonBufer2[i] && debounceButtonBufer3[i] == debounceButtonBufer2[i])
 80004d8:	4a3e      	ldr	r2, [pc, #248]	; (80005d4 <button_reading+0x14c>)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4413      	add	r3, r2
 80004de:	781a      	ldrb	r2, [r3, #0]
 80004e0:	493a      	ldr	r1, [pc, #232]	; (80005cc <button_reading+0x144>)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	440b      	add	r3, r1
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	429a      	cmp	r2, r3
 80004ea:	d112      	bne.n	8000512 <button_reading+0x8a>
 80004ec:	4a38      	ldr	r2, [pc, #224]	; (80005d0 <button_reading+0x148>)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4413      	add	r3, r2
 80004f2:	781a      	ldrb	r2, [r3, #0]
 80004f4:	4935      	ldr	r1, [pc, #212]	; (80005cc <button_reading+0x144>)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	440b      	add	r3, r1
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	429a      	cmp	r2, r3
 80004fe:	d108      	bne.n	8000512 <button_reading+0x8a>
			buttonBuffer[i] = debounceButtonBufer1[i];
 8000500:	4a34      	ldr	r2, [pc, #208]	; (80005d4 <button_reading+0x14c>)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4413      	add	r3, r2
 8000506:	7819      	ldrb	r1, [r3, #0]
 8000508:	4a34      	ldr	r2, [pc, #208]	; (80005dc <button_reading+0x154>)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4413      	add	r3, r2
 800050e:	460a      	mov	r2, r1
 8000510:	701a      	strb	r2, [r3, #0]

		if (buttonBuffer[i] == BUTTON_IS_PRESSED) {
 8000512:	4a32      	ldr	r2, [pc, #200]	; (80005dc <button_reading+0x154>)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	4413      	add	r3, r2
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d136      	bne.n	800058c <button_reading+0x104>
			if (counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING) {
 800051e:	4a30      	ldr	r2, [pc, #192]	; (80005e0 <button_reading+0x158>)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000526:	2bc7      	cmp	r3, #199	; 0xc7
 8000528:	d80a      	bhi.n	8000540 <button_reading+0xb8>
				counterForButtonPress1s[i]++;
 800052a:	4a2d      	ldr	r2, [pc, #180]	; (80005e0 <button_reading+0x158>)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000532:	3301      	adds	r3, #1
 8000534:	b299      	uxth	r1, r3
 8000536:	4a2a      	ldr	r2, [pc, #168]	; (80005e0 <button_reading+0x158>)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800053e:	e039      	b.n	80005b4 <button_reading+0x12c>
			}
			else {
				flagForButtonPress1s[i] = 1;
 8000540:	4a28      	ldr	r2, [pc, #160]	; (80005e4 <button_reading+0x15c>)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4413      	add	r3, r2
 8000546:	2201      	movs	r2, #1
 8000548:	701a      	strb	r2, [r3, #0]
				//TO DO
				if (counterForButtonHold[i] < DURATION_FOR_HOLD) {
 800054a:	4a27      	ldr	r2, [pc, #156]	; (80005e8 <button_reading+0x160>)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000552:	2b31      	cmp	r3, #49	; 0x31
 8000554:	d82e      	bhi.n	80005b4 <button_reading+0x12c>
					counterForButtonHold[i]++;
 8000556:	4a24      	ldr	r2, [pc, #144]	; (80005e8 <button_reading+0x160>)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800055e:	3301      	adds	r3, #1
 8000560:	b299      	uxth	r1, r3
 8000562:	4a21      	ldr	r2, [pc, #132]	; (80005e8 <button_reading+0x160>)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if (counterForButtonHold[i] >= DURATION_FOR_HOLD) {
 800056a:	4a1f      	ldr	r2, [pc, #124]	; (80005e8 <button_reading+0x160>)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000572:	2b31      	cmp	r3, #49	; 0x31
 8000574:	d91e      	bls.n	80005b4 <button_reading+0x12c>
						counterForButtonHold[i] = 0;
 8000576:	4a1c      	ldr	r2, [pc, #112]	; (80005e8 <button_reading+0x160>)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2100      	movs	r1, #0
 800057c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						flagForButtonHold[i] = 1;
 8000580:	4a1a      	ldr	r2, [pc, #104]	; (80005ec <button_reading+0x164>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4413      	add	r3, r2
 8000586:	2201      	movs	r2, #1
 8000588:	701a      	strb	r2, [r3, #0]
 800058a:	e013      	b.n	80005b4 <button_reading+0x12c>
					}
				}
			}
		}
		else {
			counterForButtonPress1s[i] = 0;
 800058c:	4a14      	ldr	r2, [pc, #80]	; (80005e0 <button_reading+0x158>)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2100      	movs	r1, #0
 8000592:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s[i] = 0;
 8000596:	4a13      	ldr	r2, [pc, #76]	; (80005e4 <button_reading+0x15c>)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4413      	add	r3, r2
 800059c:	2200      	movs	r2, #0
 800059e:	701a      	strb	r2, [r3, #0]
			counterForButtonHold[i] = 0;
 80005a0:	4a11      	ldr	r2, [pc, #68]	; (80005e8 <button_reading+0x160>)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2100      	movs	r1, #0
 80005a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonHold[i] = 0;
 80005aa:	4a10      	ldr	r2, [pc, #64]	; (80005ec <button_reading+0x164>)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4413      	add	r3, r2
 80005b0:	2200      	movs	r2, #0
 80005b2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NO_OF_BUTTONS; i++) {
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	3301      	adds	r3, #1
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	f77f af69 	ble.w	8000494 <button_reading+0xc>
		}
	}
}
 80005c2:	bf00      	nop
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000044 	.word	0x20000044
 80005d0:	20000048 	.word	0x20000048
 80005d4:	20000040 	.word	0x20000040
 80005d8:	40010c00 	.word	0x40010c00
 80005dc:	2000003c 	.word	0x2000003c
 80005e0:	20000054 	.word	0x20000054
 80005e4:	2000004c 	.word	0x2000004c
 80005e8:	2000005c 	.word	0x2000005c
 80005ec:	20000050 	.word	0x20000050

080005f0 <is_button_pressed>:

unsigned char is_button_pressed(unsigned char index) {
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
	if (index >= NO_OF_BUTTONS) return 0;
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	2b02      	cmp	r3, #2
 80005fe:	d901      	bls.n	8000604 <is_button_pressed+0x14>
 8000600:	2300      	movs	r3, #0
 8000602:	e007      	b.n	8000614 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	4a06      	ldr	r2, [pc, #24]	; (8000620 <is_button_pressed+0x30>)
 8000608:	5cd3      	ldrb	r3, [r2, r3]
 800060a:	2b00      	cmp	r3, #0
 800060c:	bf0c      	ite	eq
 800060e:	2301      	moveq	r3, #1
 8000610:	2300      	movne	r3, #0
 8000612:	b2db      	uxtb	r3, r3
}
 8000614:	4618      	mov	r0, r3
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	2000003c 	.word	0x2000003c

08000624 <is_button_pressed_1s>:

unsigned char is_button_pressed_1s(unsigned char index) {
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
	if (index >= NO_OF_BUTTONS) return 0;
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	2b02      	cmp	r3, #2
 8000632:	d901      	bls.n	8000638 <is_button_pressed_1s+0x14>
 8000634:	2300      	movs	r3, #0
 8000636:	e007      	b.n	8000648 <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	4a06      	ldr	r2, [pc, #24]	; (8000654 <is_button_pressed_1s+0x30>)
 800063c:	5cd3      	ldrb	r3, [r2, r3]
 800063e:	2b01      	cmp	r3, #1
 8000640:	bf0c      	ite	eq
 8000642:	2301      	moveq	r3, #1
 8000644:	2300      	movne	r3, #0
 8000646:	b2db      	uxtb	r3, r3
}
 8000648:	4618      	mov	r0, r3
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	2000004c 	.word	0x2000004c

08000658 <is_button_held>:

unsigned char is_button_held(unsigned char index) {
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
	if (index >= NO_OF_BUTTONS) return 0;
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	2b02      	cmp	r3, #2
 8000666:	d901      	bls.n	800066c <is_button_held+0x14>
 8000668:	2300      	movs	r3, #0
 800066a:	e007      	b.n	800067c <is_button_held+0x24>
	return (flagForButtonHold[index] == 1);
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	4a06      	ldr	r2, [pc, #24]	; (8000688 <is_button_held+0x30>)
 8000670:	5cd3      	ldrb	r3, [r2, r3]
 8000672:	2b01      	cmp	r3, #1
 8000674:	bf0c      	ite	eq
 8000676:	2301      	moveq	r3, #1
 8000678:	2300      	movne	r3, #0
 800067a:	b2db      	uxtb	r3, r3
}
 800067c:	4618      	mov	r0, r3
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	bc80      	pop	{r7}
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	20000050 	.word	0x20000050

0800068c <reset_flagForButtonHold>:

void reset_flagForButtonHold(unsigned char index) {
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
	flagForButtonHold[index] = 0;
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	4a03      	ldr	r2, [pc, #12]	; (80006a8 <reset_flagForButtonHold+0x1c>)
 800069a:	2100      	movs	r1, #0
 800069c:	54d1      	strb	r1, [r2, r3]
}
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr
 80006a8:	20000050 	.word	0x20000050

080006ac <display7SEG>:
#include "led_display.h"

enum LEDState {RED, YELLOW, GREEN};

static void display7SEG(int num) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2b09      	cmp	r3, #9
 80006b8:	f200 8180 	bhi.w	80009bc <display7SEG+0x310>
 80006bc:	a201      	add	r2, pc, #4	; (adr r2, 80006c4 <display7SEG+0x18>)
 80006be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006c2:	bf00      	nop
 80006c4:	080006ed 	.word	0x080006ed
 80006c8:	08000735 	.word	0x08000735
 80006cc:	0800077d 	.word	0x0800077d
 80006d0:	080007c5 	.word	0x080007c5
 80006d4:	0800080d 	.word	0x0800080d
 80006d8:	08000855 	.word	0x08000855
 80006dc:	0800089d 	.word	0x0800089d
 80006e0:	080008e5 	.word	0x080008e5
 80006e4:	0800092d 	.word	0x0800092d
 80006e8:	08000975 	.word	0x08000975
	switch (num) {
		case 0:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80006ec:	2201      	movs	r2, #1
 80006ee:	2101      	movs	r1, #1
 80006f0:	48b5      	ldr	r0, [pc, #724]	; (80009c8 <display7SEG+0x31c>)
 80006f2:	f001 fad2 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80006f6:	2201      	movs	r2, #1
 80006f8:	2102      	movs	r1, #2
 80006fa:	48b3      	ldr	r0, [pc, #716]	; (80009c8 <display7SEG+0x31c>)
 80006fc:	f001 facd 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000700:	2201      	movs	r2, #1
 8000702:	2104      	movs	r1, #4
 8000704:	48b0      	ldr	r0, [pc, #704]	; (80009c8 <display7SEG+0x31c>)
 8000706:	f001 fac8 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800070a:	2201      	movs	r2, #1
 800070c:	2108      	movs	r1, #8
 800070e:	48ae      	ldr	r0, [pc, #696]	; (80009c8 <display7SEG+0x31c>)
 8000710:	f001 fac3 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	2110      	movs	r1, #16
 8000718:	48ab      	ldr	r0, [pc, #684]	; (80009c8 <display7SEG+0x31c>)
 800071a:	f001 fabe 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800071e:	2201      	movs	r2, #1
 8000720:	2120      	movs	r1, #32
 8000722:	48a9      	ldr	r0, [pc, #676]	; (80009c8 <display7SEG+0x31c>)
 8000724:	f001 fab9 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	2140      	movs	r1, #64	; 0x40
 800072c:	48a6      	ldr	r0, [pc, #664]	; (80009c8 <display7SEG+0x31c>)
 800072e:	f001 fab4 	bl	8001c9a <HAL_GPIO_WritePin>
			break;
 8000732:	e144      	b.n	80009be <display7SEG+0x312>
		case 1:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	2101      	movs	r1, #1
 8000738:	48a3      	ldr	r0, [pc, #652]	; (80009c8 <display7SEG+0x31c>)
 800073a:	f001 faae 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800073e:	2201      	movs	r2, #1
 8000740:	2102      	movs	r1, #2
 8000742:	48a1      	ldr	r0, [pc, #644]	; (80009c8 <display7SEG+0x31c>)
 8000744:	f001 faa9 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000748:	2201      	movs	r2, #1
 800074a:	2104      	movs	r1, #4
 800074c:	489e      	ldr	r0, [pc, #632]	; (80009c8 <display7SEG+0x31c>)
 800074e:	f001 faa4 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	2108      	movs	r1, #8
 8000756:	489c      	ldr	r0, [pc, #624]	; (80009c8 <display7SEG+0x31c>)
 8000758:	f001 fa9f 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	2110      	movs	r1, #16
 8000760:	4899      	ldr	r0, [pc, #612]	; (80009c8 <display7SEG+0x31c>)
 8000762:	f001 fa9a 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	2120      	movs	r1, #32
 800076a:	4897      	ldr	r0, [pc, #604]	; (80009c8 <display7SEG+0x31c>)
 800076c:	f001 fa95 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	2140      	movs	r1, #64	; 0x40
 8000774:	4894      	ldr	r0, [pc, #592]	; (80009c8 <display7SEG+0x31c>)
 8000776:	f001 fa90 	bl	8001c9a <HAL_GPIO_WritePin>
			break;
 800077a:	e120      	b.n	80009be <display7SEG+0x312>
		case 2:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800077c:	2201      	movs	r2, #1
 800077e:	2101      	movs	r1, #1
 8000780:	4891      	ldr	r0, [pc, #580]	; (80009c8 <display7SEG+0x31c>)
 8000782:	f001 fa8a 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000786:	2201      	movs	r2, #1
 8000788:	2102      	movs	r1, #2
 800078a:	488f      	ldr	r0, [pc, #572]	; (80009c8 <display7SEG+0x31c>)
 800078c:	f001 fa85 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	2104      	movs	r1, #4
 8000794:	488c      	ldr	r0, [pc, #560]	; (80009c8 <display7SEG+0x31c>)
 8000796:	f001 fa80 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800079a:	2201      	movs	r2, #1
 800079c:	2108      	movs	r1, #8
 800079e:	488a      	ldr	r0, [pc, #552]	; (80009c8 <display7SEG+0x31c>)
 80007a0:	f001 fa7b 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80007a4:	2201      	movs	r2, #1
 80007a6:	2110      	movs	r1, #16
 80007a8:	4887      	ldr	r0, [pc, #540]	; (80009c8 <display7SEG+0x31c>)
 80007aa:	f001 fa76 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2120      	movs	r1, #32
 80007b2:	4885      	ldr	r0, [pc, #532]	; (80009c8 <display7SEG+0x31c>)
 80007b4:	f001 fa71 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80007b8:	2201      	movs	r2, #1
 80007ba:	2140      	movs	r1, #64	; 0x40
 80007bc:	4882      	ldr	r0, [pc, #520]	; (80009c8 <display7SEG+0x31c>)
 80007be:	f001 fa6c 	bl	8001c9a <HAL_GPIO_WritePin>
			break;
 80007c2:	e0fc      	b.n	80009be <display7SEG+0x312>
		  case 3:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80007c4:	2201      	movs	r2, #1
 80007c6:	2101      	movs	r1, #1
 80007c8:	487f      	ldr	r0, [pc, #508]	; (80009c8 <display7SEG+0x31c>)
 80007ca:	f001 fa66 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80007ce:	2201      	movs	r2, #1
 80007d0:	2102      	movs	r1, #2
 80007d2:	487d      	ldr	r0, [pc, #500]	; (80009c8 <display7SEG+0x31c>)
 80007d4:	f001 fa61 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80007d8:	2201      	movs	r2, #1
 80007da:	2104      	movs	r1, #4
 80007dc:	487a      	ldr	r0, [pc, #488]	; (80009c8 <display7SEG+0x31c>)
 80007de:	f001 fa5c 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80007e2:	2201      	movs	r2, #1
 80007e4:	2108      	movs	r1, #8
 80007e6:	4878      	ldr	r0, [pc, #480]	; (80009c8 <display7SEG+0x31c>)
 80007e8:	f001 fa57 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2110      	movs	r1, #16
 80007f0:	4875      	ldr	r0, [pc, #468]	; (80009c8 <display7SEG+0x31c>)
 80007f2:	f001 fa52 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2120      	movs	r1, #32
 80007fa:	4873      	ldr	r0, [pc, #460]	; (80009c8 <display7SEG+0x31c>)
 80007fc:	f001 fa4d 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000800:	2201      	movs	r2, #1
 8000802:	2140      	movs	r1, #64	; 0x40
 8000804:	4870      	ldr	r0, [pc, #448]	; (80009c8 <display7SEG+0x31c>)
 8000806:	f001 fa48 	bl	8001c9a <HAL_GPIO_WritePin>
			break;
 800080a:	e0d8      	b.n	80009be <display7SEG+0x312>
		  case 4:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	2101      	movs	r1, #1
 8000810:	486d      	ldr	r0, [pc, #436]	; (80009c8 <display7SEG+0x31c>)
 8000812:	f001 fa42 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000816:	2201      	movs	r2, #1
 8000818:	2102      	movs	r1, #2
 800081a:	486b      	ldr	r0, [pc, #428]	; (80009c8 <display7SEG+0x31c>)
 800081c:	f001 fa3d 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000820:	2201      	movs	r2, #1
 8000822:	2104      	movs	r1, #4
 8000824:	4868      	ldr	r0, [pc, #416]	; (80009c8 <display7SEG+0x31c>)
 8000826:	f001 fa38 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2108      	movs	r1, #8
 800082e:	4866      	ldr	r0, [pc, #408]	; (80009c8 <display7SEG+0x31c>)
 8000830:	f001 fa33 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	2110      	movs	r1, #16
 8000838:	4863      	ldr	r0, [pc, #396]	; (80009c8 <display7SEG+0x31c>)
 800083a:	f001 fa2e 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800083e:	2201      	movs	r2, #1
 8000840:	2120      	movs	r1, #32
 8000842:	4861      	ldr	r0, [pc, #388]	; (80009c8 <display7SEG+0x31c>)
 8000844:	f001 fa29 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000848:	2201      	movs	r2, #1
 800084a:	2140      	movs	r1, #64	; 0x40
 800084c:	485e      	ldr	r0, [pc, #376]	; (80009c8 <display7SEG+0x31c>)
 800084e:	f001 fa24 	bl	8001c9a <HAL_GPIO_WritePin>
			break;
 8000852:	e0b4      	b.n	80009be <display7SEG+0x312>
		  case 5:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000854:	2201      	movs	r2, #1
 8000856:	2101      	movs	r1, #1
 8000858:	485b      	ldr	r0, [pc, #364]	; (80009c8 <display7SEG+0x31c>)
 800085a:	f001 fa1e 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	2102      	movs	r1, #2
 8000862:	4859      	ldr	r0, [pc, #356]	; (80009c8 <display7SEG+0x31c>)
 8000864:	f001 fa19 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000868:	2201      	movs	r2, #1
 800086a:	2104      	movs	r1, #4
 800086c:	4856      	ldr	r0, [pc, #344]	; (80009c8 <display7SEG+0x31c>)
 800086e:	f001 fa14 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000872:	2201      	movs	r2, #1
 8000874:	2108      	movs	r1, #8
 8000876:	4854      	ldr	r0, [pc, #336]	; (80009c8 <display7SEG+0x31c>)
 8000878:	f001 fa0f 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800087c:	2200      	movs	r2, #0
 800087e:	2110      	movs	r1, #16
 8000880:	4851      	ldr	r0, [pc, #324]	; (80009c8 <display7SEG+0x31c>)
 8000882:	f001 fa0a 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000886:	2201      	movs	r2, #1
 8000888:	2120      	movs	r1, #32
 800088a:	484f      	ldr	r0, [pc, #316]	; (80009c8 <display7SEG+0x31c>)
 800088c:	f001 fa05 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000890:	2201      	movs	r2, #1
 8000892:	2140      	movs	r1, #64	; 0x40
 8000894:	484c      	ldr	r0, [pc, #304]	; (80009c8 <display7SEG+0x31c>)
 8000896:	f001 fa00 	bl	8001c9a <HAL_GPIO_WritePin>
			break;
 800089a:	e090      	b.n	80009be <display7SEG+0x312>
		  case 6:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800089c:	2201      	movs	r2, #1
 800089e:	2101      	movs	r1, #1
 80008a0:	4849      	ldr	r0, [pc, #292]	; (80009c8 <display7SEG+0x31c>)
 80008a2:	f001 f9fa 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2102      	movs	r1, #2
 80008aa:	4847      	ldr	r0, [pc, #284]	; (80009c8 <display7SEG+0x31c>)
 80008ac:	f001 f9f5 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80008b0:	2201      	movs	r2, #1
 80008b2:	2104      	movs	r1, #4
 80008b4:	4844      	ldr	r0, [pc, #272]	; (80009c8 <display7SEG+0x31c>)
 80008b6:	f001 f9f0 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80008ba:	2201      	movs	r2, #1
 80008bc:	2108      	movs	r1, #8
 80008be:	4842      	ldr	r0, [pc, #264]	; (80009c8 <display7SEG+0x31c>)
 80008c0:	f001 f9eb 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80008c4:	2201      	movs	r2, #1
 80008c6:	2110      	movs	r1, #16
 80008c8:	483f      	ldr	r0, [pc, #252]	; (80009c8 <display7SEG+0x31c>)
 80008ca:	f001 f9e6 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80008ce:	2201      	movs	r2, #1
 80008d0:	2120      	movs	r1, #32
 80008d2:	483d      	ldr	r0, [pc, #244]	; (80009c8 <display7SEG+0x31c>)
 80008d4:	f001 f9e1 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80008d8:	2201      	movs	r2, #1
 80008da:	2140      	movs	r1, #64	; 0x40
 80008dc:	483a      	ldr	r0, [pc, #232]	; (80009c8 <display7SEG+0x31c>)
 80008de:	f001 f9dc 	bl	8001c9a <HAL_GPIO_WritePin>
			break;
 80008e2:	e06c      	b.n	80009be <display7SEG+0x312>
		  case 7:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80008e4:	2201      	movs	r2, #1
 80008e6:	2101      	movs	r1, #1
 80008e8:	4837      	ldr	r0, [pc, #220]	; (80009c8 <display7SEG+0x31c>)
 80008ea:	f001 f9d6 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80008ee:	2201      	movs	r2, #1
 80008f0:	2102      	movs	r1, #2
 80008f2:	4835      	ldr	r0, [pc, #212]	; (80009c8 <display7SEG+0x31c>)
 80008f4:	f001 f9d1 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	2104      	movs	r1, #4
 80008fc:	4832      	ldr	r0, [pc, #200]	; (80009c8 <display7SEG+0x31c>)
 80008fe:	f001 f9cc 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	2108      	movs	r1, #8
 8000906:	4830      	ldr	r0, [pc, #192]	; (80009c8 <display7SEG+0x31c>)
 8000908:	f001 f9c7 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	2110      	movs	r1, #16
 8000910:	482d      	ldr	r0, [pc, #180]	; (80009c8 <display7SEG+0x31c>)
 8000912:	f001 f9c2 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	2120      	movs	r1, #32
 800091a:	482b      	ldr	r0, [pc, #172]	; (80009c8 <display7SEG+0x31c>)
 800091c:	f001 f9bd 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	2140      	movs	r1, #64	; 0x40
 8000924:	4828      	ldr	r0, [pc, #160]	; (80009c8 <display7SEG+0x31c>)
 8000926:	f001 f9b8 	bl	8001c9a <HAL_GPIO_WritePin>
			break;
 800092a:	e048      	b.n	80009be <display7SEG+0x312>
		  case 8:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800092c:	2201      	movs	r2, #1
 800092e:	2101      	movs	r1, #1
 8000930:	4825      	ldr	r0, [pc, #148]	; (80009c8 <display7SEG+0x31c>)
 8000932:	f001 f9b2 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000936:	2201      	movs	r2, #1
 8000938:	2102      	movs	r1, #2
 800093a:	4823      	ldr	r0, [pc, #140]	; (80009c8 <display7SEG+0x31c>)
 800093c:	f001 f9ad 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000940:	2201      	movs	r2, #1
 8000942:	2104      	movs	r1, #4
 8000944:	4820      	ldr	r0, [pc, #128]	; (80009c8 <display7SEG+0x31c>)
 8000946:	f001 f9a8 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800094a:	2201      	movs	r2, #1
 800094c:	2108      	movs	r1, #8
 800094e:	481e      	ldr	r0, [pc, #120]	; (80009c8 <display7SEG+0x31c>)
 8000950:	f001 f9a3 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000954:	2201      	movs	r2, #1
 8000956:	2110      	movs	r1, #16
 8000958:	481b      	ldr	r0, [pc, #108]	; (80009c8 <display7SEG+0x31c>)
 800095a:	f001 f99e 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800095e:	2201      	movs	r2, #1
 8000960:	2120      	movs	r1, #32
 8000962:	4819      	ldr	r0, [pc, #100]	; (80009c8 <display7SEG+0x31c>)
 8000964:	f001 f999 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000968:	2201      	movs	r2, #1
 800096a:	2140      	movs	r1, #64	; 0x40
 800096c:	4816      	ldr	r0, [pc, #88]	; (80009c8 <display7SEG+0x31c>)
 800096e:	f001 f994 	bl	8001c9a <HAL_GPIO_WritePin>
			break;
 8000972:	e024      	b.n	80009be <display7SEG+0x312>
		  case 9:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000974:	2201      	movs	r2, #1
 8000976:	2101      	movs	r1, #1
 8000978:	4813      	ldr	r0, [pc, #76]	; (80009c8 <display7SEG+0x31c>)
 800097a:	f001 f98e 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800097e:	2201      	movs	r2, #1
 8000980:	2102      	movs	r1, #2
 8000982:	4811      	ldr	r0, [pc, #68]	; (80009c8 <display7SEG+0x31c>)
 8000984:	f001 f989 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000988:	2201      	movs	r2, #1
 800098a:	2104      	movs	r1, #4
 800098c:	480e      	ldr	r0, [pc, #56]	; (80009c8 <display7SEG+0x31c>)
 800098e:	f001 f984 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000992:	2201      	movs	r2, #1
 8000994:	2108      	movs	r1, #8
 8000996:	480c      	ldr	r0, [pc, #48]	; (80009c8 <display7SEG+0x31c>)
 8000998:	f001 f97f 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	2110      	movs	r1, #16
 80009a0:	4809      	ldr	r0, [pc, #36]	; (80009c8 <display7SEG+0x31c>)
 80009a2:	f001 f97a 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80009a6:	2201      	movs	r2, #1
 80009a8:	2120      	movs	r1, #32
 80009aa:	4807      	ldr	r0, [pc, #28]	; (80009c8 <display7SEG+0x31c>)
 80009ac:	f001 f975 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80009b0:	2201      	movs	r2, #1
 80009b2:	2140      	movs	r1, #64	; 0x40
 80009b4:	4804      	ldr	r0, [pc, #16]	; (80009c8 <display7SEG+0x31c>)
 80009b6:	f001 f970 	bl	8001c9a <HAL_GPIO_WritePin>
			break;
 80009ba:	e000      	b.n	80009be <display7SEG+0x312>
		  default:
			  break;
 80009bc:	bf00      	nop
	}
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40010800 	.word	0x40010800

080009cc <resetCountValue>:
enum LEDState state1 = RED;
enum LEDState state2 = GREEN;



void resetCountValue() {
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
//	count1 = RED_INIT;
//	count2 = GREEN_INIT;
	count1 = red_value;
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <resetCountValue+0x28>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a08      	ldr	r2, [pc, #32]	; (80009f8 <resetCountValue+0x2c>)
 80009d6:	6013      	str	r3, [r2, #0]
	count2 = green_value;
 80009d8:	4b08      	ldr	r3, [pc, #32]	; (80009fc <resetCountValue+0x30>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a08      	ldr	r2, [pc, #32]	; (8000a00 <resetCountValue+0x34>)
 80009de:	6013      	str	r3, [r2, #0]
	state1 = RED;
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <resetCountValue+0x38>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	701a      	strb	r2, [r3, #0]
	state2 = GREEN;
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <resetCountValue+0x3c>)
 80009e8:	2202      	movs	r2, #2
 80009ea:	701a      	strb	r2, [r3, #0]
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	20000088 	.word	0x20000088
 80009f8:	20000000 	.word	0x20000000
 80009fc:	20000090 	.word	0x20000090
 8000a00:	20000004 	.word	0x20000004
 8000a04:	20000062 	.word	0x20000062
 8000a08:	20000008 	.word	0x20000008

08000a0c <NormalMode>:

void NormalMode() {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
//	count1 = RED_INIT;
//	count2 = GREEN_INIT;
	count1--;
 8000a10:	4bab      	ldr	r3, [pc, #684]	; (8000cc0 <NormalMode+0x2b4>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	3b01      	subs	r3, #1
 8000a16:	4aaa      	ldr	r2, [pc, #680]	; (8000cc0 <NormalMode+0x2b4>)
 8000a18:	6013      	str	r3, [r2, #0]
	count2--;
 8000a1a:	4baa      	ldr	r3, [pc, #680]	; (8000cc4 <NormalMode+0x2b8>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	4aa8      	ldr	r2, [pc, #672]	; (8000cc4 <NormalMode+0x2b8>)
 8000a22:	6013      	str	r3, [r2, #0]
	switch (state1) {
 8000a24:	4ba8      	ldr	r3, [pc, #672]	; (8000cc8 <NormalMode+0x2bc>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b02      	cmp	r3, #2
 8000a2a:	d069      	beq.n	8000b00 <NormalMode+0xf4>
 8000a2c:	2b02      	cmp	r3, #2
 8000a2e:	f300 8098 	bgt.w	8000b62 <NormalMode+0x156>
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d002      	beq.n	8000a3c <NormalMode+0x30>
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d031      	beq.n	8000a9e <NormalMode+0x92>
				HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_SET);
				HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_RESET);
			}
			break;
		default:
			break;
 8000a3a:	e092      	b.n	8000b62 <NormalMode+0x156>
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a42:	48a2      	ldr	r0, [pc, #648]	; (8000ccc <NormalMode+0x2c0>)
 8000a44:	f001 f929 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a4e:	489f      	ldr	r0, [pc, #636]	; (8000ccc <NormalMode+0x2c0>)
 8000a50:	f001 f923 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a5a:	489c      	ldr	r0, [pc, #624]	; (8000ccc <NormalMode+0x2c0>)
 8000a5c:	f001 f91d 	bl	8001c9a <HAL_GPIO_WritePin>
			if (count1 < 0) {
 8000a60:	4b97      	ldr	r3, [pc, #604]	; (8000cc0 <NormalMode+0x2b4>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	da7e      	bge.n	8000b66 <NormalMode+0x15a>
				count1 = green_value - 1;
 8000a68:	4b99      	ldr	r3, [pc, #612]	; (8000cd0 <NormalMode+0x2c4>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	4a94      	ldr	r2, [pc, #592]	; (8000cc0 <NormalMode+0x2b4>)
 8000a70:	6013      	str	r3, [r2, #0]
				state1 = GREEN;
 8000a72:	4b95      	ldr	r3, [pc, #596]	; (8000cc8 <NormalMode+0x2bc>)
 8000a74:	2202      	movs	r2, #2
 8000a76:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a7e:	4893      	ldr	r0, [pc, #588]	; (8000ccc <NormalMode+0x2c0>)
 8000a80:	f001 f90b 	bl	8001c9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a8a:	4890      	ldr	r0, [pc, #576]	; (8000ccc <NormalMode+0x2c0>)
 8000a8c:	f001 f905 	bl	8001c9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_SET);
 8000a90:	2201      	movs	r2, #1
 8000a92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a96:	488d      	ldr	r0, [pc, #564]	; (8000ccc <NormalMode+0x2c0>)
 8000a98:	f001 f8ff 	bl	8001c9a <HAL_GPIO_WritePin>
			break;
 8000a9c:	e063      	b.n	8000b66 <NormalMode+0x15a>
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aa4:	4889      	ldr	r0, [pc, #548]	; (8000ccc <NormalMode+0x2c0>)
 8000aa6:	f001 f8f8 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_SET);
 8000aaa:	2201      	movs	r2, #1
 8000aac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ab0:	4886      	ldr	r0, [pc, #536]	; (8000ccc <NormalMode+0x2c0>)
 8000ab2:	f001 f8f2 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000abc:	4883      	ldr	r0, [pc, #524]	; (8000ccc <NormalMode+0x2c0>)
 8000abe:	f001 f8ec 	bl	8001c9a <HAL_GPIO_WritePin>
			if (count1 < 0) {
 8000ac2:	4b7f      	ldr	r3, [pc, #508]	; (8000cc0 <NormalMode+0x2b4>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	da4f      	bge.n	8000b6a <NormalMode+0x15e>
				count1 = red_value - 1;
 8000aca:	4b82      	ldr	r3, [pc, #520]	; (8000cd4 <NormalMode+0x2c8>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	4a7b      	ldr	r2, [pc, #492]	; (8000cc0 <NormalMode+0x2b4>)
 8000ad2:	6013      	str	r3, [r2, #0]
				state1 = RED;
 8000ad4:	4b7c      	ldr	r3, [pc, #496]	; (8000cc8 <NormalMode+0x2bc>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);
 8000ada:	2201      	movs	r2, #1
 8000adc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ae0:	487a      	ldr	r0, [pc, #488]	; (8000ccc <NormalMode+0x2c0>)
 8000ae2:	f001 f8da 	bl	8001c9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aec:	4877      	ldr	r0, [pc, #476]	; (8000ccc <NormalMode+0x2c0>)
 8000aee:	f001 f8d4 	bl	8001c9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000af8:	4874      	ldr	r0, [pc, #464]	; (8000ccc <NormalMode+0x2c0>)
 8000afa:	f001 f8ce 	bl	8001c9a <HAL_GPIO_WritePin>
			break;
 8000afe:	e034      	b.n	8000b6a <NormalMode+0x15e>
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b06:	4871      	ldr	r0, [pc, #452]	; (8000ccc <NormalMode+0x2c0>)
 8000b08:	f001 f8c7 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_RESET);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b12:	486e      	ldr	r0, [pc, #440]	; (8000ccc <NormalMode+0x2c0>)
 8000b14:	f001 f8c1 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_SET);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b1e:	486b      	ldr	r0, [pc, #428]	; (8000ccc <NormalMode+0x2c0>)
 8000b20:	f001 f8bb 	bl	8001c9a <HAL_GPIO_WritePin>
			if (count1 < 0) {
 8000b24:	4b66      	ldr	r3, [pc, #408]	; (8000cc0 <NormalMode+0x2b4>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	da20      	bge.n	8000b6e <NormalMode+0x162>
				count1 = yellow_value - 1;
 8000b2c:	4b6a      	ldr	r3, [pc, #424]	; (8000cd8 <NormalMode+0x2cc>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	3b01      	subs	r3, #1
 8000b32:	4a63      	ldr	r2, [pc, #396]	; (8000cc0 <NormalMode+0x2b4>)
 8000b34:	6013      	str	r3, [r2, #0]
				state1 = YELLOW;
 8000b36:	4b64      	ldr	r3, [pc, #400]	; (8000cc8 <NormalMode+0x2bc>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b42:	4862      	ldr	r0, [pc, #392]	; (8000ccc <NormalMode+0x2c0>)
 8000b44:	f001 f8a9 	bl	8001c9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_SET);
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b4e:	485f      	ldr	r0, [pc, #380]	; (8000ccc <NormalMode+0x2c0>)
 8000b50:	f001 f8a3 	bl	8001c9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_RESET);
 8000b54:	2200      	movs	r2, #0
 8000b56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b5a:	485c      	ldr	r0, [pc, #368]	; (8000ccc <NormalMode+0x2c0>)
 8000b5c:	f001 f89d 	bl	8001c9a <HAL_GPIO_WritePin>
			break;
 8000b60:	e005      	b.n	8000b6e <NormalMode+0x162>
			break;
 8000b62:	bf00      	nop
 8000b64:	e004      	b.n	8000b70 <NormalMode+0x164>
			break;
 8000b66:	bf00      	nop
 8000b68:	e002      	b.n	8000b70 <NormalMode+0x164>
			break;
 8000b6a:	bf00      	nop
 8000b6c:	e000      	b.n	8000b70 <NormalMode+0x164>
			break;
 8000b6e:	bf00      	nop
	}
	switch (state2) {
 8000b70:	4b5a      	ldr	r3, [pc, #360]	; (8000cdc <NormalMode+0x2d0>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d069      	beq.n	8000c4c <NormalMode+0x240>
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	f300 8098 	bgt.w	8000cae <NormalMode+0x2a2>
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d002      	beq.n	8000b88 <NormalMode+0x17c>
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d031      	beq.n	8000bea <NormalMode+0x1de>
				HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_SET);
				HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_RESET);
			}
			break;
		default:
			break;
 8000b86:	e092      	b.n	8000cae <NormalMode+0x2a2>
			HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000b88:	2201      	movs	r2, #1
 8000b8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b8e:	484f      	ldr	r0, [pc, #316]	; (8000ccc <NormalMode+0x2c0>)
 8000b90:	f001 f883 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b9a:	484c      	ldr	r0, [pc, #304]	; (8000ccc <NormalMode+0x2c0>)
 8000b9c:	f001 f87d 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ba6:	4849      	ldr	r0, [pc, #292]	; (8000ccc <NormalMode+0x2c0>)
 8000ba8:	f001 f877 	bl	8001c9a <HAL_GPIO_WritePin>
			if (count2 < 0) {
 8000bac:	4b45      	ldr	r3, [pc, #276]	; (8000cc4 <NormalMode+0x2b8>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	da7e      	bge.n	8000cb2 <NormalMode+0x2a6>
				count2 = green_value - 1;
 8000bb4:	4b46      	ldr	r3, [pc, #280]	; (8000cd0 <NormalMode+0x2c4>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	3b01      	subs	r3, #1
 8000bba:	4a42      	ldr	r2, [pc, #264]	; (8000cc4 <NormalMode+0x2b8>)
 8000bbc:	6013      	str	r3, [r2, #0]
				state2 = GREEN;
 8000bbe:	4b47      	ldr	r3, [pc, #284]	; (8000cdc <NormalMode+0x2d0>)
 8000bc0:	2202      	movs	r2, #2
 8000bc2:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bca:	4840      	ldr	r0, [pc, #256]	; (8000ccc <NormalMode+0x2c0>)
 8000bcc:	f001 f865 	bl	8001c9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_RESET);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bd6:	483d      	ldr	r0, [pc, #244]	; (8000ccc <NormalMode+0x2c0>)
 8000bd8:	f001 f85f 	bl	8001c9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_SET);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000be2:	483a      	ldr	r0, [pc, #232]	; (8000ccc <NormalMode+0x2c0>)
 8000be4:	f001 f859 	bl	8001c9a <HAL_GPIO_WritePin>
			break;
 8000be8:	e063      	b.n	8000cb2 <NormalMode+0x2a6>
			HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bf0:	4836      	ldr	r0, [pc, #216]	; (8000ccc <NormalMode+0x2c0>)
 8000bf2:	f001 f852 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_SET);
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bfc:	4833      	ldr	r0, [pc, #204]	; (8000ccc <NormalMode+0x2c0>)
 8000bfe:	f001 f84c 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c08:	4830      	ldr	r0, [pc, #192]	; (8000ccc <NormalMode+0x2c0>)
 8000c0a:	f001 f846 	bl	8001c9a <HAL_GPIO_WritePin>
			if (count2 < 0) {
 8000c0e:	4b2d      	ldr	r3, [pc, #180]	; (8000cc4 <NormalMode+0x2b8>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	da4f      	bge.n	8000cb6 <NormalMode+0x2aa>
				count2 = red_value - 1;
 8000c16:	4b2f      	ldr	r3, [pc, #188]	; (8000cd4 <NormalMode+0x2c8>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	4a29      	ldr	r2, [pc, #164]	; (8000cc4 <NormalMode+0x2b8>)
 8000c1e:	6013      	str	r3, [r2, #0]
				state2 = RED;
 8000c20:	4b2e      	ldr	r3, [pc, #184]	; (8000cdc <NormalMode+0x2d0>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);
 8000c26:	2201      	movs	r2, #1
 8000c28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c2c:	4827      	ldr	r0, [pc, #156]	; (8000ccc <NormalMode+0x2c0>)
 8000c2e:	f001 f834 	bl	8001c9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c38:	4824      	ldr	r0, [pc, #144]	; (8000ccc <NormalMode+0x2c0>)
 8000c3a:	f001 f82e 	bl	8001c9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c44:	4821      	ldr	r0, [pc, #132]	; (8000ccc <NormalMode+0x2c0>)
 8000c46:	f001 f828 	bl	8001c9a <HAL_GPIO_WritePin>
			break;
 8000c4a:	e034      	b.n	8000cb6 <NormalMode+0x2aa>
			HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c52:	481e      	ldr	r0, [pc, #120]	; (8000ccc <NormalMode+0x2c0>)
 8000c54:	f001 f821 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_RESET);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c5e:	481b      	ldr	r0, [pc, #108]	; (8000ccc <NormalMode+0x2c0>)
 8000c60:	f001 f81b 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_SET);
 8000c64:	2201      	movs	r2, #1
 8000c66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c6a:	4818      	ldr	r0, [pc, #96]	; (8000ccc <NormalMode+0x2c0>)
 8000c6c:	f001 f815 	bl	8001c9a <HAL_GPIO_WritePin>
			if (count2 < 0) {
 8000c70:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <NormalMode+0x2b8>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	da20      	bge.n	8000cba <NormalMode+0x2ae>
				count2 = yellow_value - 1;
 8000c78:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <NormalMode+0x2cc>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	3b01      	subs	r3, #1
 8000c7e:	4a11      	ldr	r2, [pc, #68]	; (8000cc4 <NormalMode+0x2b8>)
 8000c80:	6013      	str	r3, [r2, #0]
				state2 = YELLOW;
 8000c82:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <NormalMode+0x2d0>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c8e:	480f      	ldr	r0, [pc, #60]	; (8000ccc <NormalMode+0x2c0>)
 8000c90:	f001 f803 	bl	8001c9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_SET);
 8000c94:	2201      	movs	r2, #1
 8000c96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c9a:	480c      	ldr	r0, [pc, #48]	; (8000ccc <NormalMode+0x2c0>)
 8000c9c:	f000 fffd 	bl	8001c9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_RESET);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ca6:	4809      	ldr	r0, [pc, #36]	; (8000ccc <NormalMode+0x2c0>)
 8000ca8:	f000 fff7 	bl	8001c9a <HAL_GPIO_WritePin>
			break;
 8000cac:	e005      	b.n	8000cba <NormalMode+0x2ae>
			break;
 8000cae:	bf00      	nop
 8000cb0:	e004      	b.n	8000cbc <NormalMode+0x2b0>
			break;
 8000cb2:	bf00      	nop
 8000cb4:	e002      	b.n	8000cbc <NormalMode+0x2b0>
			break;
 8000cb6:	bf00      	nop
 8000cb8:	e000      	b.n	8000cbc <NormalMode+0x2b0>
			break;
 8000cba:	bf00      	nop
	}

}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20000000 	.word	0x20000000
 8000cc4:	20000004 	.word	0x20000004
 8000cc8:	20000062 	.word	0x20000062
 8000ccc:	40010c00 	.word	0x40010c00
 8000cd0:	20000090 	.word	0x20000090
 8000cd4:	20000088 	.word	0x20000088
 8000cd8:	20000098 	.word	0x20000098
 8000cdc:	20000008 	.word	0x20000008

08000ce0 <get7SEG1Value>:

static int get7SEG1Value() {
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
	switch (mode) {
 8000ce4:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <get7SEG1Value+0x48>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	2b03      	cmp	r3, #3
 8000cec:	d816      	bhi.n	8000d1c <get7SEG1Value+0x3c>
 8000cee:	a201      	add	r2, pc, #4	; (adr r2, 8000cf4 <get7SEG1Value+0x14>)
 8000cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf4:	08000d05 	.word	0x08000d05
 8000cf8:	08000d0b 	.word	0x08000d0b
 8000cfc:	08000d11 	.word	0x08000d11
 8000d00:	08000d17 	.word	0x08000d17
		case 1:
			return count1;
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <get7SEG1Value+0x4c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	e00a      	b.n	8000d20 <get7SEG1Value+0x40>
		case 2:
			return red_draft;
 8000d0a:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <get7SEG1Value+0x50>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	e007      	b.n	8000d20 <get7SEG1Value+0x40>
		case 3:
			return yellow_draft;
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <get7SEG1Value+0x54>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	e004      	b.n	8000d20 <get7SEG1Value+0x40>
		case 4:
			return green_draft;
 8000d16:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <get7SEG1Value+0x58>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	e001      	b.n	8000d20 <get7SEG1Value+0x40>
		default:
			break;
 8000d1c:	bf00      	nop
	}
	return 0;
 8000d1e:	2300      	movs	r3, #0
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr
 8000d28:	2000000c 	.word	0x2000000c
 8000d2c:	20000000 	.word	0x20000000
 8000d30:	2000009c 	.word	0x2000009c
 8000d34:	2000008c 	.word	0x2000008c
 8000d38:	20000094 	.word	0x20000094

08000d3c <get7SEG2Value>:
static int get7SEG2Value() {
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
	switch (mode) {
 8000d40:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <get7SEG2Value+0x48>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	3b01      	subs	r3, #1
 8000d46:	2b03      	cmp	r3, #3
 8000d48:	d816      	bhi.n	8000d78 <get7SEG2Value+0x3c>
 8000d4a:	a201      	add	r2, pc, #4	; (adr r2, 8000d50 <get7SEG2Value+0x14>)
 8000d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d50:	08000d61 	.word	0x08000d61
 8000d54:	08000d67 	.word	0x08000d67
 8000d58:	08000d6d 	.word	0x08000d6d
 8000d5c:	08000d73 	.word	0x08000d73
		case 1:
			return count2;
 8000d60:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <get7SEG2Value+0x4c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	e00a      	b.n	8000d7c <get7SEG2Value+0x40>
		case 2:
			return red_draft;
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <get7SEG2Value+0x50>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	e007      	b.n	8000d7c <get7SEG2Value+0x40>
		case 3:
			return yellow_draft;
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <get7SEG2Value+0x54>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	e004      	b.n	8000d7c <get7SEG2Value+0x40>
		case 4:
			return green_draft;
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <get7SEG2Value+0x58>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	e001      	b.n	8000d7c <get7SEG2Value+0x40>
		default:
			break;
 8000d78:	bf00      	nop
	}
	return 0;
 8000d7a:	2300      	movs	r3, #0
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr
 8000d84:	2000000c 	.word	0x2000000c
 8000d88:	20000004 	.word	0x20000004
 8000d8c:	2000009c 	.word	0x2000009c
 8000d90:	2000008c 	.word	0x2000008c
 8000d94:	20000094 	.word	0x20000094

08000d98 <LedDispMode>:


void LedDispMode() {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	switch (mode) {
 8000d9c:	4b54      	ldr	r3, [pc, #336]	; (8000ef0 <LedDispMode+0x158>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	3b01      	subs	r3, #1
 8000da2:	2b03      	cmp	r3, #3
 8000da4:	f200 8099 	bhi.w	8000eda <LedDispMode+0x142>
 8000da8:	a201      	add	r2, pc, #4	; (adr r2, 8000db0 <LedDispMode+0x18>)
 8000daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dae:	bf00      	nop
 8000db0:	08000dc1 	.word	0x08000dc1
 8000db4:	08000dd9 	.word	0x08000dd9
 8000db8:	08000e2f 	.word	0x08000e2f
 8000dbc:	08000e85 	.word	0x08000e85
		case 1:
			if (get_timer0_flag()) {
 8000dc0:	f000 fc1e 	bl	8001600 <get_timer0_flag>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	f000 8089 	beq.w	8000ede <LedDispMode+0x146>
				setTimer0(250);
 8000dcc:	20fa      	movs	r0, #250	; 0xfa
 8000dce:	f000 fb71 	bl	80014b4 <setTimer0>
				NormalMode();
 8000dd2:	f7ff fe1b 	bl	8000a0c <NormalMode>
			}
			break;
 8000dd6:	e082      	b.n	8000ede <LedDispMode+0x146>
		case 2:
			if (get_timer0_flag()) {
 8000dd8:	f000 fc12 	bl	8001600 <get_timer0_flag>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d07f      	beq.n	8000ee2 <LedDispMode+0x14a>
				setTimer0(200);
 8000de2:	20c8      	movs	r0, #200	; 0xc8
 8000de4:	f000 fb66 	bl	80014b4 <setTimer0>
				HAL_GPIO_TogglePin(R1_GPIO_Port, R1_Pin);
 8000de8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dec:	4841      	ldr	r0, [pc, #260]	; (8000ef4 <LedDispMode+0x15c>)
 8000dee:	f000 ff6c 	bl	8001cca <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(R2_GPIO_Port, R2_Pin);
 8000df2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000df6:	483f      	ldr	r0, [pc, #252]	; (8000ef4 <LedDispMode+0x15c>)
 8000df8:	f000 ff67 	bl	8001cca <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_RESET);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e02:	483c      	ldr	r0, [pc, #240]	; (8000ef4 <LedDispMode+0x15c>)
 8000e04:	f000 ff49 	bl	8001c9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e0e:	4839      	ldr	r0, [pc, #228]	; (8000ef4 <LedDispMode+0x15c>)
 8000e10:	f000 ff43 	bl	8001c9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_RESET);
 8000e14:	2200      	movs	r2, #0
 8000e16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e1a:	4836      	ldr	r0, [pc, #216]	; (8000ef4 <LedDispMode+0x15c>)
 8000e1c:	f000 ff3d 	bl	8001c9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e26:	4833      	ldr	r0, [pc, #204]	; (8000ef4 <LedDispMode+0x15c>)
 8000e28:	f000 ff37 	bl	8001c9a <HAL_GPIO_WritePin>
			}
			break;
 8000e2c:	e059      	b.n	8000ee2 <LedDispMode+0x14a>
		case 3:
			if (get_timer0_flag()) {
 8000e2e:	f000 fbe7 	bl	8001600 <get_timer0_flag>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d056      	beq.n	8000ee6 <LedDispMode+0x14e>
				setTimer0(200);
 8000e38:	20c8      	movs	r0, #200	; 0xc8
 8000e3a:	f000 fb3b 	bl	80014b4 <setTimer0>
				HAL_GPIO_TogglePin(Y1_GPIO_Port, Y1_Pin);
 8000e3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e42:	482c      	ldr	r0, [pc, #176]	; (8000ef4 <LedDispMode+0x15c>)
 8000e44:	f000 ff41 	bl	8001cca <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(Y2_GPIO_Port, Y2_Pin);
 8000e48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e4c:	4829      	ldr	r0, [pc, #164]	; (8000ef4 <LedDispMode+0x15c>)
 8000e4e:	f000 ff3c 	bl	8001cca <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e58:	4826      	ldr	r0, [pc, #152]	; (8000ef4 <LedDispMode+0x15c>)
 8000e5a:	f000 ff1e 	bl	8001c9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, GPIO_PIN_RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e64:	4823      	ldr	r0, [pc, #140]	; (8000ef4 <LedDispMode+0x15c>)
 8000e66:	f000 ff18 	bl	8001c9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e70:	4820      	ldr	r0, [pc, #128]	; (8000ef4 <LedDispMode+0x15c>)
 8000e72:	f000 ff12 	bl	8001c9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, GPIO_PIN_RESET);
 8000e76:	2200      	movs	r2, #0
 8000e78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e7c:	481d      	ldr	r0, [pc, #116]	; (8000ef4 <LedDispMode+0x15c>)
 8000e7e:	f000 ff0c 	bl	8001c9a <HAL_GPIO_WritePin>
			}
			break;
 8000e82:	e030      	b.n	8000ee6 <LedDispMode+0x14e>
		case 4:
			if (get_timer0_flag()) {
 8000e84:	f000 fbbc 	bl	8001600 <get_timer0_flag>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d02d      	beq.n	8000eea <LedDispMode+0x152>
				setTimer0(200);
 8000e8e:	20c8      	movs	r0, #200	; 0xc8
 8000e90:	f000 fb10 	bl	80014b4 <setTimer0>
				HAL_GPIO_TogglePin(G1_GPIO_Port, G1_Pin);
 8000e94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e98:	4816      	ldr	r0, [pc, #88]	; (8000ef4 <LedDispMode+0x15c>)
 8000e9a:	f000 ff16 	bl	8001cca <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(G2_GPIO_Port, G2_Pin);
 8000e9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ea2:	4814      	ldr	r0, [pc, #80]	; (8000ef4 <LedDispMode+0x15c>)
 8000ea4:	f000 ff11 	bl	8001cca <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, GPIO_PIN_RESET);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eae:	4811      	ldr	r0, [pc, #68]	; (8000ef4 <LedDispMode+0x15c>)
 8000eb0:	f000 fef3 	bl	8001c9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eba:	480e      	ldr	r0, [pc, #56]	; (8000ef4 <LedDispMode+0x15c>)
 8000ebc:	f000 feed 	bl	8001c9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, GPIO_PIN_RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ec6:	480b      	ldr	r0, [pc, #44]	; (8000ef4 <LedDispMode+0x15c>)
 8000ec8:	f000 fee7 	bl	8001c9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ed2:	4808      	ldr	r0, [pc, #32]	; (8000ef4 <LedDispMode+0x15c>)
 8000ed4:	f000 fee1 	bl	8001c9a <HAL_GPIO_WritePin>
			}
			break;
 8000ed8:	e007      	b.n	8000eea <LedDispMode+0x152>
		default:
			break;
 8000eda:	bf00      	nop
 8000edc:	e006      	b.n	8000eec <LedDispMode+0x154>
			break;
 8000ede:	bf00      	nop
 8000ee0:	e004      	b.n	8000eec <LedDispMode+0x154>
			break;
 8000ee2:	bf00      	nop
 8000ee4:	e002      	b.n	8000eec <LedDispMode+0x154>
			break;
 8000ee6:	bf00      	nop
 8000ee8:	e000      	b.n	8000eec <LedDispMode+0x154>
			break;
 8000eea:	bf00      	nop
	}
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	2000000c 	.word	0x2000000c
 8000ef4:	40010c00 	.word	0x40010c00

08000ef8 <LEDScanning>:


void LEDScanning() {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	static int scan_index = 0;
	switch (scan_index) {
 8000efc:	4b7e      	ldr	r3, [pc, #504]	; (80010f8 <LEDScanning+0x200>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b04      	cmp	r3, #4
 8000f02:	f200 80f6 	bhi.w	80010f2 <LEDScanning+0x1fa>
 8000f06:	a201      	add	r2, pc, #4	; (adr r2, 8000f0c <LEDScanning+0x14>)
 8000f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f0c:	08000f21 	.word	0x08000f21
 8000f10:	08000f7d 	.word	0x08000f7d
 8000f14:	08000fe3 	.word	0x08000fe3
 8000f18:	0800103f 	.word	0x0800103f
 8000f1c:	080010a5 	.word	0x080010a5
		case 0:
			HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_SET);
 8000f20:	2201      	movs	r2, #1
 8000f22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f26:	4875      	ldr	r0, [pc, #468]	; (80010fc <LEDScanning+0x204>)
 8000f28:	f000 feb7 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f32:	4872      	ldr	r0, [pc, #456]	; (80010fc <LEDScanning+0x204>)
 8000f34:	f000 feb1 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f3e:	486f      	ldr	r0, [pc, #444]	; (80010fc <LEDScanning+0x204>)
 8000f40:	f000 feab 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000f44:	2201      	movs	r2, #1
 8000f46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f4a:	486c      	ldr	r0, [pc, #432]	; (80010fc <LEDScanning+0x204>)
 8000f4c:	f000 fea5 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f56:	4869      	ldr	r0, [pc, #420]	; (80010fc <LEDScanning+0x204>)
 8000f58:	f000 fe9f 	bl	8001c9a <HAL_GPIO_WritePin>
			display7SEG(get7SEG1Value() / 10);
 8000f5c:	f7ff fec0 	bl	8000ce0 <get7SEG1Value>
 8000f60:	4603      	mov	r3, r0
 8000f62:	4a67      	ldr	r2, [pc, #412]	; (8001100 <LEDScanning+0x208>)
 8000f64:	fb82 1203 	smull	r1, r2, r2, r3
 8000f68:	1092      	asrs	r2, r2, #2
 8000f6a:	17db      	asrs	r3, r3, #31
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff fb9c 	bl	80006ac <display7SEG>
			scan_index = 1;
 8000f74:	4b60      	ldr	r3, [pc, #384]	; (80010f8 <LEDScanning+0x200>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	601a      	str	r2, [r3, #0]
			break;
 8000f7a:	e0bb      	b.n	80010f4 <LEDScanning+0x1fc>
		case 1:
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f82:	485e      	ldr	r0, [pc, #376]	; (80010fc <LEDScanning+0x204>)
 8000f84:	f000 fe89 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_SET);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f8e:	485b      	ldr	r0, [pc, #364]	; (80010fc <LEDScanning+0x204>)
 8000f90:	f000 fe83 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000f94:	2201      	movs	r2, #1
 8000f96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f9a:	4858      	ldr	r0, [pc, #352]	; (80010fc <LEDScanning+0x204>)
 8000f9c:	f000 fe7d 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fa6:	4855      	ldr	r0, [pc, #340]	; (80010fc <LEDScanning+0x204>)
 8000fa8:	f000 fe77 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000fac:	2200      	movs	r2, #0
 8000fae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fb2:	4852      	ldr	r0, [pc, #328]	; (80010fc <LEDScanning+0x204>)
 8000fb4:	f000 fe71 	bl	8001c9a <HAL_GPIO_WritePin>
			display7SEG(get7SEG1Value() % 10);
 8000fb8:	f7ff fe92 	bl	8000ce0 <get7SEG1Value>
 8000fbc:	4601      	mov	r1, r0
 8000fbe:	4b50      	ldr	r3, [pc, #320]	; (8001100 <LEDScanning+0x208>)
 8000fc0:	fb83 2301 	smull	r2, r3, r3, r1
 8000fc4:	109a      	asrs	r2, r3, #2
 8000fc6:	17cb      	asrs	r3, r1, #31
 8000fc8:	1ad2      	subs	r2, r2, r3
 8000fca:	4613      	mov	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	4413      	add	r3, r2
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	1aca      	subs	r2, r1, r3
 8000fd4:	4610      	mov	r0, r2
 8000fd6:	f7ff fb69 	bl	80006ac <display7SEG>
			scan_index = 2;
 8000fda:	4b47      	ldr	r3, [pc, #284]	; (80010f8 <LEDScanning+0x200>)
 8000fdc:	2202      	movs	r2, #2
 8000fde:	601a      	str	r2, [r3, #0]
			break;
 8000fe0:	e088      	b.n	80010f4 <LEDScanning+0x1fc>
		case 2:
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fe8:	4844      	ldr	r0, [pc, #272]	; (80010fc <LEDScanning+0x204>)
 8000fea:	f000 fe56 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ff4:	4841      	ldr	r0, [pc, #260]	; (80010fc <LEDScanning+0x204>)
 8000ff6:	f000 fe50 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_SET);
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001000:	483e      	ldr	r0, [pc, #248]	; (80010fc <LEDScanning+0x204>)
 8001002:	f000 fe4a 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8001006:	2201      	movs	r2, #1
 8001008:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800100c:	483b      	ldr	r0, [pc, #236]	; (80010fc <LEDScanning+0x204>)
 800100e:	f000 fe44 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001018:	4838      	ldr	r0, [pc, #224]	; (80010fc <LEDScanning+0x204>)
 800101a:	f000 fe3e 	bl	8001c9a <HAL_GPIO_WritePin>
			display7SEG(get7SEG2Value() / 10);
 800101e:	f7ff fe8d 	bl	8000d3c <get7SEG2Value>
 8001022:	4603      	mov	r3, r0
 8001024:	4a36      	ldr	r2, [pc, #216]	; (8001100 <LEDScanning+0x208>)
 8001026:	fb82 1203 	smull	r1, r2, r2, r3
 800102a:	1092      	asrs	r2, r2, #2
 800102c:	17db      	asrs	r3, r3, #31
 800102e:	1ad3      	subs	r3, r2, r3
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fb3b 	bl	80006ac <display7SEG>
			scan_index = 3;
 8001036:	4b30      	ldr	r3, [pc, #192]	; (80010f8 <LEDScanning+0x200>)
 8001038:	2203      	movs	r2, #3
 800103a:	601a      	str	r2, [r3, #0]
			break;
 800103c:	e05a      	b.n	80010f4 <LEDScanning+0x1fc>
		case 3:
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 800103e:	2201      	movs	r2, #1
 8001040:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001044:	482d      	ldr	r0, [pc, #180]	; (80010fc <LEDScanning+0x204>)
 8001046:	f000 fe28 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 800104a:	2201      	movs	r2, #1
 800104c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001050:	482a      	ldr	r0, [pc, #168]	; (80010fc <LEDScanning+0x204>)
 8001052:	f000 fe22 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8001056:	2201      	movs	r2, #1
 8001058:	f44f 7180 	mov.w	r1, #256	; 0x100
 800105c:	4827      	ldr	r0, [pc, #156]	; (80010fc <LEDScanning+0x204>)
 800105e:	f000 fe1c 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_SET);
 8001062:	2201      	movs	r2, #1
 8001064:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001068:	4824      	ldr	r0, [pc, #144]	; (80010fc <LEDScanning+0x204>)
 800106a:	f000 fe16 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001074:	4821      	ldr	r0, [pc, #132]	; (80010fc <LEDScanning+0x204>)
 8001076:	f000 fe10 	bl	8001c9a <HAL_GPIO_WritePin>
			display7SEG(get7SEG2Value() % 10);
 800107a:	f7ff fe5f 	bl	8000d3c <get7SEG2Value>
 800107e:	4601      	mov	r1, r0
 8001080:	4b1f      	ldr	r3, [pc, #124]	; (8001100 <LEDScanning+0x208>)
 8001082:	fb83 2301 	smull	r2, r3, r3, r1
 8001086:	109a      	asrs	r2, r3, #2
 8001088:	17cb      	asrs	r3, r1, #31
 800108a:	1ad2      	subs	r2, r2, r3
 800108c:	4613      	mov	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	4413      	add	r3, r2
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	1aca      	subs	r2, r1, r3
 8001096:	4610      	mov	r0, r2
 8001098:	f7ff fb08 	bl	80006ac <display7SEG>
			scan_index = 4;
 800109c:	4b16      	ldr	r3, [pc, #88]	; (80010f8 <LEDScanning+0x200>)
 800109e:	2204      	movs	r2, #4
 80010a0:	601a      	str	r2, [r3, #0]
			break;
 80010a2:	e027      	b.n	80010f4 <LEDScanning+0x1fc>
		case 4:
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010aa:	4814      	ldr	r0, [pc, #80]	; (80010fc <LEDScanning+0x204>)
 80010ac:	f000 fdf5 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80010b0:	2201      	movs	r2, #1
 80010b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010b6:	4811      	ldr	r0, [pc, #68]	; (80010fc <LEDScanning+0x204>)
 80010b8:	f000 fdef 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80010bc:	2201      	movs	r2, #1
 80010be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010c2:	480e      	ldr	r0, [pc, #56]	; (80010fc <LEDScanning+0x204>)
 80010c4:	f000 fde9 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 80010c8:	2201      	movs	r2, #1
 80010ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ce:	480b      	ldr	r0, [pc, #44]	; (80010fc <LEDScanning+0x204>)
 80010d0:	f000 fde3 	bl	8001c9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010da:	4808      	ldr	r0, [pc, #32]	; (80010fc <LEDScanning+0x204>)
 80010dc:	f000 fddd 	bl	8001c9a <HAL_GPIO_WritePin>
			display7SEG(mode);
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <LEDScanning+0x20c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fae1 	bl	80006ac <display7SEG>
			scan_index = 0;
 80010ea:	4b03      	ldr	r3, [pc, #12]	; (80010f8 <LEDScanning+0x200>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
			break;
 80010f0:	e000      	b.n	80010f4 <LEDScanning+0x1fc>
		default:
			break;
 80010f2:	bf00      	nop
	}
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000064 	.word	0x20000064
 80010fc:	40010800 	.word	0x40010800
 8001100:	66666667 	.word	0x66666667
 8001104:	2000000c 	.word	0x2000000c

08001108 <LedTimeDurationInit>:

int mode = 1;
int red_value, yellow_value, green_value;
int red_draft, yellow_draft, green_draft;

void LedTimeDurationInit() {
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
	red_value = RED_INIT;
 800110c:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <LedTimeDurationInit+0x38>)
 800110e:	221e      	movs	r2, #30
 8001110:	601a      	str	r2, [r3, #0]
	yellow_value = YELLOW_INIT;
 8001112:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <LedTimeDurationInit+0x3c>)
 8001114:	2205      	movs	r2, #5
 8001116:	601a      	str	r2, [r3, #0]
	green_value = GREEN_INIT;
 8001118:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <LedTimeDurationInit+0x40>)
 800111a:	2219      	movs	r2, #25
 800111c:	601a      	str	r2, [r3, #0]
	red_draft = red_value;
 800111e:	4b08      	ldr	r3, [pc, #32]	; (8001140 <LedTimeDurationInit+0x38>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a0a      	ldr	r2, [pc, #40]	; (800114c <LedTimeDurationInit+0x44>)
 8001124:	6013      	str	r3, [r2, #0]
	yellow_draft = yellow_value;
 8001126:	4b07      	ldr	r3, [pc, #28]	; (8001144 <LedTimeDurationInit+0x3c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a09      	ldr	r2, [pc, #36]	; (8001150 <LedTimeDurationInit+0x48>)
 800112c:	6013      	str	r3, [r2, #0]
	green_draft = green_value;
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <LedTimeDurationInit+0x40>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a08      	ldr	r2, [pc, #32]	; (8001154 <LedTimeDurationInit+0x4c>)
 8001134:	6013      	str	r3, [r2, #0]
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	20000088 	.word	0x20000088
 8001144:	20000098 	.word	0x20000098
 8001148:	20000090 	.word	0x20000090
 800114c:	2000009c 	.word	0x2000009c
 8001150:	2000008c 	.word	0x2000008c
 8001154:	20000094 	.word	0x20000094

08001158 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800115c:	f000 fa9c 	bl	8001698 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001160:	f000 f82a 	bl	80011b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001164:	f000 f8b0 	bl	80012c8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001168:	f000 f862 	bl	8001230 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800116c:	4811      	ldr	r0, [pc, #68]	; (80011b4 <main+0x5c>)
 800116e:	f001 f9f1 	bl	8002554 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  init_buffer();
 8001172:	f7ff f93f 	bl	80003f4 <init_buffer>
  LedTimeDurationInit();
 8001176:	f7ff ffc7 	bl	8001108 <LedTimeDurationInit>
  setTimer0(1);
 800117a:	2001      	movs	r0, #1
 800117c:	f000 f99a 	bl	80014b4 <setTimer0>
  setTimer1(1);
 8001180:	2001      	movs	r0, #1
 8001182:	f000 f9ab 	bl	80014dc <setTimer1>
  setTimer2(1);
 8001186:	2001      	movs	r0, #1
 8001188:	f000 f9bc 	bl	8001504 <setTimer2>
  setTimer3(1);
 800118c:	2001      	movs	r0, #1
 800118e:	f000 f9cd 	bl	800152c <setTimer3>
  while (1)
  {
	  UpdateMode();
 8001192:	f7fe ffdb 	bl	800014c <UpdateMode>
	  if (get_timer2_flag()) {
 8001196:	f000 fa3d 	bl	8001614 <get_timer2_flag>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d004      	beq.n	80011aa <main+0x52>
		  LEDScanning();
 80011a0:	f7ff feaa 	bl	8000ef8 <LEDScanning>
		  setTimer2(1);
 80011a4:	2001      	movs	r0, #1
 80011a6:	f000 f9ad 	bl	8001504 <setTimer2>
	  }

	  LedDispMode();
 80011aa:	f7ff fdf5 	bl	8000d98 <LedDispMode>
	  UpdateDurationValue();
 80011ae:	f7ff f8b3 	bl	8000318 <UpdateDurationValue>
	  UpdateMode();
 80011b2:	e7ee      	b.n	8001192 <main+0x3a>
 80011b4:	200000a0 	.word	0x200000a0

080011b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b090      	sub	sp, #64	; 0x40
 80011bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011be:	f107 0318 	add.w	r3, r7, #24
 80011c2:	2228      	movs	r2, #40	; 0x28
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f001 fd74 	bl	8002cb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011da:	2302      	movs	r3, #2
 80011dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011de:	2301      	movs	r3, #1
 80011e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011e2:	2310      	movs	r3, #16
 80011e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ea:	f107 0318 	add.w	r3, r7, #24
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 fd84 	bl	8001cfc <HAL_RCC_OscConfig>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <SystemClock_Config+0x46>
  {
    Error_Handler();
 80011fa:	f000 f8c7 	bl	800138c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fe:	230f      	movs	r3, #15
 8001200:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001202:	2300      	movs	r3, #0
 8001204:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f000 fff0 	bl	80021fc <HAL_RCC_ClockConfig>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001222:	f000 f8b3 	bl	800138c <Error_Handler>
  }
}
 8001226:	bf00      	nop
 8001228:	3740      	adds	r7, #64	; 0x40
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001236:	f107 0308 	add.w	r3, r7, #8
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001244:	463b      	mov	r3, r7
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800124c:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <MX_TIM2_Init+0x94>)
 800124e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001252:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8001254:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <MX_TIM2_Init+0x94>)
 8001256:	f240 321f 	movw	r2, #799	; 0x31f
 800125a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125c:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <MX_TIM2_Init+0x94>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001262:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <MX_TIM2_Init+0x94>)
 8001264:	2209      	movs	r2, #9
 8001266:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001268:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <MX_TIM2_Init+0x94>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126e:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <MX_TIM2_Init+0x94>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001274:	4813      	ldr	r0, [pc, #76]	; (80012c4 <MX_TIM2_Init+0x94>)
 8001276:	f001 f91d 	bl	80024b4 <HAL_TIM_Base_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001280:	f000 f884 	bl	800138c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001284:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001288:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	4619      	mov	r1, r3
 8001290:	480c      	ldr	r0, [pc, #48]	; (80012c4 <MX_TIM2_Init+0x94>)
 8001292:	f001 fa9b 	bl	80027cc <HAL_TIM_ConfigClockSource>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800129c:	f000 f876 	bl	800138c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a0:	2300      	movs	r3, #0
 80012a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012a8:	463b      	mov	r3, r7
 80012aa:	4619      	mov	r1, r3
 80012ac:	4805      	ldr	r0, [pc, #20]	; (80012c4 <MX_TIM2_Init+0x94>)
 80012ae:	f001 fc73 	bl	8002b98 <HAL_TIMEx_MasterConfigSynchronization>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012b8:	f000 f868 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012bc:	bf00      	nop
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	200000a0 	.word	0x200000a0

080012c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ce:	f107 0308 	add.w	r3, r7, #8
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012dc:	4b28      	ldr	r3, [pc, #160]	; (8001380 <MX_GPIO_Init+0xb8>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	4a27      	ldr	r2, [pc, #156]	; (8001380 <MX_GPIO_Init+0xb8>)
 80012e2:	f043 0304 	orr.w	r3, r3, #4
 80012e6:	6193      	str	r3, [r2, #24]
 80012e8:	4b25      	ldr	r3, [pc, #148]	; (8001380 <MX_GPIO_Init+0xb8>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f4:	4b22      	ldr	r3, [pc, #136]	; (8001380 <MX_GPIO_Init+0xb8>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	4a21      	ldr	r2, [pc, #132]	; (8001380 <MX_GPIO_Init+0xb8>)
 80012fa:	f043 0308 	orr.w	r3, r3, #8
 80012fe:	6193      	str	r3, [r2, #24]
 8001300:	4b1f      	ldr	r3, [pc, #124]	; (8001380 <MX_GPIO_Init+0xb8>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	f003 0308 	and.w	r3, r3, #8
 8001308:	603b      	str	r3, [r7, #0]
 800130a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 800130c:	2200      	movs	r2, #0
 800130e:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8001312:	481c      	ldr	r0, [pc, #112]	; (8001384 <MX_GPIO_Init+0xbc>)
 8001314:	f000 fcc1 	bl	8001c9a <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|LED_RED_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |MODE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, G1_Pin|R2_Pin|Y2_Pin|G2_Pin
 8001318:	2200      	movs	r2, #0
 800131a:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
 800131e:	481a      	ldr	r0, [pc, #104]	; (8001388 <MX_GPIO_Init+0xc0>)
 8001320:	f000 fcbb 	bl	8001c9a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin LED_RED_Pin
                           EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           MODE_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8001324:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001328:	60bb      	str	r3, [r7, #8]
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|LED_RED_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |MODE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132a:	2301      	movs	r3, #1
 800132c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	2302      	movs	r3, #2
 8001334:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001336:	f107 0308 	add.w	r3, r7, #8
 800133a:	4619      	mov	r1, r3
 800133c:	4811      	ldr	r0, [pc, #68]	; (8001384 <MX_GPIO_Init+0xbc>)
 800133e:	f000 fb1b 	bl	8001978 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8001342:	2307      	movs	r3, #7
 8001344:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134e:	f107 0308 	add.w	r3, r7, #8
 8001352:	4619      	mov	r1, r3
 8001354:	480c      	ldr	r0, [pc, #48]	; (8001388 <MX_GPIO_Init+0xc0>)
 8001356:	f000 fb0f 	bl	8001978 <HAL_GPIO_Init>

  /*Configure GPIO pins : G1_Pin R2_Pin Y2_Pin G2_Pin
                           R1_Pin Y1_Pin */
  GPIO_InitStruct.Pin = G1_Pin|R2_Pin|Y2_Pin|G2_Pin
 800135a:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 800135e:	60bb      	str	r3, [r7, #8]
                          |R1_Pin|Y1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001360:	2301      	movs	r3, #1
 8001362:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	2302      	movs	r3, #2
 800136a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136c:	f107 0308 	add.w	r3, r7, #8
 8001370:	4619      	mov	r1, r3
 8001372:	4805      	ldr	r0, [pc, #20]	; (8001388 <MX_GPIO_Init+0xc0>)
 8001374:	f000 fb00 	bl	8001978 <HAL_GPIO_Init>

}
 8001378:	bf00      	nop
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40021000 	.word	0x40021000
 8001384:	40010800 	.word	0x40010800
 8001388:	40010c00 	.word	0x40010c00

0800138c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001390:	b672      	cpsid	i
}
 8001392:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001394:	e7fe      	b.n	8001394 <Error_Handler+0x8>
	...

08001398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800139e:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <HAL_MspInit+0x5c>)
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <HAL_MspInit+0x5c>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6193      	str	r3, [r2, #24]
 80013aa:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <HAL_MspInit+0x5c>)
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b6:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <HAL_MspInit+0x5c>)
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	4a0e      	ldr	r2, [pc, #56]	; (80013f4 <HAL_MspInit+0x5c>)
 80013bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c0:	61d3      	str	r3, [r2, #28]
 80013c2:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <HAL_MspInit+0x5c>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80013ce:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <HAL_MspInit+0x60>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <HAL_MspInit+0x60>)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ea:	bf00      	nop
 80013ec:	3714      	adds	r7, #20
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40010000 	.word	0x40010000

080013fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800140c:	d113      	bne.n	8001436 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800140e:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <HAL_TIM_Base_MspInit+0x44>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	4a0b      	ldr	r2, [pc, #44]	; (8001440 <HAL_TIM_Base_MspInit+0x44>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	61d3      	str	r3, [r2, #28]
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <HAL_TIM_Base_MspInit+0x44>)
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2100      	movs	r1, #0
 800142a:	201c      	movs	r0, #28
 800142c:	f000 fa6d 	bl	800190a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001430:	201c      	movs	r0, #28
 8001432:	f000 fa86 	bl	8001942 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001436:	bf00      	nop
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40021000 	.word	0x40021000

08001444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001448:	e7fe      	b.n	8001448 <NMI_Handler+0x4>

0800144a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800144e:	e7fe      	b.n	800144e <HardFault_Handler+0x4>

08001450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001454:	e7fe      	b.n	8001454 <MemManage_Handler+0x4>

08001456 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800145a:	e7fe      	b.n	800145a <BusFault_Handler+0x4>

0800145c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <UsageFault_Handler+0x4>

08001462 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr

0800146e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr

0800147a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr

08001486 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800148a:	f000 f94b 	bl	8001724 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001498:	4802      	ldr	r0, [pc, #8]	; (80014a4 <TIM2_IRQHandler+0x10>)
 800149a:	f001 f8a7 	bl	80025ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	200000a0 	.word	0x200000a0

080014a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr

080014b4 <setTimer0>:
int timer2_counter = 0;
int timer2_flag = 0;
int timer3_counter = 0;
int timer3_flag = 0;

void setTimer0(int duration) {
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	timer0_counter = duration / TIMER_CYCLE;
 80014bc:	4a05      	ldr	r2, [pc, #20]	; (80014d4 <setTimer0+0x20>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 80014c2:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <setTimer0+0x24>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	20000068 	.word	0x20000068
 80014d8:	2000006c 	.word	0x2000006c

080014dc <setTimer1>:
void setTimer1(int duration) {
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 80014e4:	4a05      	ldr	r2, [pc, #20]	; (80014fc <setTimer1+0x20>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80014ea:	4b05      	ldr	r3, [pc, #20]	; (8001500 <setTimer1+0x24>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	20000070 	.word	0x20000070
 8001500:	20000074 	.word	0x20000074

08001504 <setTimer2>:
void setTimer2(int duration) {
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 800150c:	4a05      	ldr	r2, [pc, #20]	; (8001524 <setTimer2+0x20>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001512:	4b05      	ldr	r3, [pc, #20]	; (8001528 <setTimer2+0x24>)
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	20000078 	.word	0x20000078
 8001528:	2000007c 	.word	0x2000007c

0800152c <setTimer3>:
void setTimer3(int duration) {
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE;
 8001534:	4a05      	ldr	r2, [pc, #20]	; (800154c <setTimer3+0x20>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800153a:	4b05      	ldr	r3, [pc, #20]	; (8001550 <setTimer3+0x24>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	20000080 	.word	0x20000080
 8001550:	20000084 	.word	0x20000084

08001554 <timer_run>:
void timer_run() {
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
	if (timer0_counter > 0) {
 8001558:	4b21      	ldr	r3, [pc, #132]	; (80015e0 <timer_run+0x8c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	dd0b      	ble.n	8001578 <timer_run+0x24>
		timer0_counter--;
 8001560:	4b1f      	ldr	r3, [pc, #124]	; (80015e0 <timer_run+0x8c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	3b01      	subs	r3, #1
 8001566:	4a1e      	ldr	r2, [pc, #120]	; (80015e0 <timer_run+0x8c>)
 8001568:	6013      	str	r3, [r2, #0]
		if (timer0_counter == 0) timer0_flag = 1;
 800156a:	4b1d      	ldr	r3, [pc, #116]	; (80015e0 <timer_run+0x8c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d102      	bne.n	8001578 <timer_run+0x24>
 8001572:	4b1c      	ldr	r3, [pc, #112]	; (80015e4 <timer_run+0x90>)
 8001574:	2201      	movs	r2, #1
 8001576:	601a      	str	r2, [r3, #0]
	}

	if (timer1_counter > 0) {
 8001578:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <timer_run+0x94>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	dd0b      	ble.n	8001598 <timer_run+0x44>
		timer1_counter--;
 8001580:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <timer_run+0x94>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	3b01      	subs	r3, #1
 8001586:	4a18      	ldr	r2, [pc, #96]	; (80015e8 <timer_run+0x94>)
 8001588:	6013      	str	r3, [r2, #0]
		if (timer1_counter == 0) timer1_flag = 1;
 800158a:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <timer_run+0x94>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d102      	bne.n	8001598 <timer_run+0x44>
 8001592:	4b16      	ldr	r3, [pc, #88]	; (80015ec <timer_run+0x98>)
 8001594:	2201      	movs	r2, #1
 8001596:	601a      	str	r2, [r3, #0]
	}
	if (timer2_counter > 0) {
 8001598:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <timer_run+0x9c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	dd0b      	ble.n	80015b8 <timer_run+0x64>
		timer2_counter--;
 80015a0:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <timer_run+0x9c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	3b01      	subs	r3, #1
 80015a6:	4a12      	ldr	r2, [pc, #72]	; (80015f0 <timer_run+0x9c>)
 80015a8:	6013      	str	r3, [r2, #0]
		if (timer2_counter == 0) timer2_flag = 1;
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <timer_run+0x9c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d102      	bne.n	80015b8 <timer_run+0x64>
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <timer_run+0xa0>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	601a      	str	r2, [r3, #0]
	}
	if (timer3_counter > 0) {
 80015b8:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <timer_run+0xa4>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	dd0b      	ble.n	80015d8 <timer_run+0x84>
		timer3_counter--;
 80015c0:	4b0d      	ldr	r3, [pc, #52]	; (80015f8 <timer_run+0xa4>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	3b01      	subs	r3, #1
 80015c6:	4a0c      	ldr	r2, [pc, #48]	; (80015f8 <timer_run+0xa4>)
 80015c8:	6013      	str	r3, [r2, #0]
		if (timer3_counter == 0) timer3_flag = 1;
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <timer_run+0xa4>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d102      	bne.n	80015d8 <timer_run+0x84>
 80015d2:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <timer_run+0xa8>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	601a      	str	r2, [r3, #0]
	}
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr
 80015e0:	20000068 	.word	0x20000068
 80015e4:	2000006c 	.word	0x2000006c
 80015e8:	20000070 	.word	0x20000070
 80015ec:	20000074 	.word	0x20000074
 80015f0:	20000078 	.word	0x20000078
 80015f4:	2000007c 	.word	0x2000007c
 80015f8:	20000080 	.word	0x20000080
 80015fc:	20000084 	.word	0x20000084

08001600 <get_timer0_flag>:

int get_timer0_flag() {
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
	return timer0_flag;
 8001604:	4b02      	ldr	r3, [pc, #8]	; (8001610 <get_timer0_flag+0x10>)
 8001606:	681b      	ldr	r3, [r3, #0]
}
 8001608:	4618      	mov	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr
 8001610:	2000006c 	.word	0x2000006c

08001614 <get_timer2_flag>:
int get_timer1_flag() {
	return timer1_flag;
}
int get_timer2_flag() {
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
	return timer2_flag;
 8001618:	4b02      	ldr	r3, [pc, #8]	; (8001624 <get_timer2_flag+0x10>)
 800161a:	681b      	ldr	r3, [r3, #0]
}
 800161c:	4618      	mov	r0, r3
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr
 8001624:	2000007c 	.word	0x2000007c

08001628 <HAL_TIM_PeriodElapsedCallback>:
int get_timer3_flag() {
	return timer3_flag;
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	timer_run();
 8001630:	f7ff ff90 	bl	8001554 <timer_run>
	if (htim->Instance == TIM2) {
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800163c:	d101      	bne.n	8001642 <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 800163e:	f7fe ff23 	bl	8000488 <button_reading>
	}
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800164c:	f7ff ff2c 	bl	80014a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001650:	480b      	ldr	r0, [pc, #44]	; (8001680 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001652:	490c      	ldr	r1, [pc, #48]	; (8001684 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001654:	4a0c      	ldr	r2, [pc, #48]	; (8001688 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001658:	e002      	b.n	8001660 <LoopCopyDataInit>

0800165a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800165a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800165c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800165e:	3304      	adds	r3, #4

08001660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001664:	d3f9      	bcc.n	800165a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001666:	4a09      	ldr	r2, [pc, #36]	; (800168c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001668:	4c09      	ldr	r4, [pc, #36]	; (8001690 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800166a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800166c:	e001      	b.n	8001672 <LoopFillZerobss>

0800166e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800166e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001670:	3204      	adds	r2, #4

08001672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001674:	d3fb      	bcc.n	800166e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001676:	f001 faf9 	bl	8002c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800167a:	f7ff fd6d 	bl	8001158 <main>
  bx lr
 800167e:	4770      	bx	lr
  ldr r0, =_sdata
 8001680:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001684:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001688:	08002d08 	.word	0x08002d08
  ldr r2, =_sbss
 800168c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001690:	200000ec 	.word	0x200000ec

08001694 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001694:	e7fe      	b.n	8001694 <ADC1_2_IRQHandler>
	...

08001698 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800169c:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <HAL_Init+0x28>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a07      	ldr	r2, [pc, #28]	; (80016c0 <HAL_Init+0x28>)
 80016a2:	f043 0310 	orr.w	r3, r3, #16
 80016a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a8:	2003      	movs	r0, #3
 80016aa:	f000 f923 	bl	80018f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ae:	200f      	movs	r0, #15
 80016b0:	f000 f808 	bl	80016c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b4:	f7ff fe70 	bl	8001398 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40022000 	.word	0x40022000

080016c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <HAL_InitTick+0x54>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_InitTick+0x58>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	4619      	mov	r1, r3
 80016d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016da:	fbb3 f3f1 	udiv	r3, r3, r1
 80016de:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 f93b 	bl	800195e <HAL_SYSTICK_Config>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e00e      	b.n	8001710 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b0f      	cmp	r3, #15
 80016f6:	d80a      	bhi.n	800170e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f8:	2200      	movs	r2, #0
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001700:	f000 f903 	bl	800190a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001704:	4a06      	ldr	r2, [pc, #24]	; (8001720 <HAL_InitTick+0x5c>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	e000      	b.n	8001710 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
}
 8001710:	4618      	mov	r0, r3
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000010 	.word	0x20000010
 800171c:	20000018 	.word	0x20000018
 8001720:	20000014 	.word	0x20000014

08001724 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001728:	4b05      	ldr	r3, [pc, #20]	; (8001740 <HAL_IncTick+0x1c>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	461a      	mov	r2, r3
 800172e:	4b05      	ldr	r3, [pc, #20]	; (8001744 <HAL_IncTick+0x20>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4413      	add	r3, r2
 8001734:	4a03      	ldr	r2, [pc, #12]	; (8001744 <HAL_IncTick+0x20>)
 8001736:	6013      	str	r3, [r2, #0]
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	20000018 	.word	0x20000018
 8001744:	200000e8 	.word	0x200000e8

08001748 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return uwTick;
 800174c:	4b02      	ldr	r3, [pc, #8]	; (8001758 <HAL_GetTick+0x10>)
 800174e:	681b      	ldr	r3, [r3, #0]
}
 8001750:	4618      	mov	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr
 8001758:	200000e8 	.word	0x200000e8

0800175c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <__NVIC_SetPriorityGrouping+0x44>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001778:	4013      	ands	r3, r2
 800177a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001784:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800178c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800178e:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	60d3      	str	r3, [r2, #12]
}
 8001794:	bf00      	nop
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a8:	4b04      	ldr	r3, [pc, #16]	; (80017bc <__NVIC_GetPriorityGrouping+0x18>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	0a1b      	lsrs	r3, r3, #8
 80017ae:	f003 0307 	and.w	r3, r3, #7
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	db0b      	blt.n	80017ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	f003 021f 	and.w	r2, r3, #31
 80017d8:	4906      	ldr	r1, [pc, #24]	; (80017f4 <__NVIC_EnableIRQ+0x34>)
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	095b      	lsrs	r3, r3, #5
 80017e0:	2001      	movs	r0, #1
 80017e2:	fa00 f202 	lsl.w	r2, r0, r2
 80017e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr
 80017f4:	e000e100 	.word	0xe000e100

080017f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	6039      	str	r1, [r7, #0]
 8001802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001808:	2b00      	cmp	r3, #0
 800180a:	db0a      	blt.n	8001822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	b2da      	uxtb	r2, r3
 8001810:	490c      	ldr	r1, [pc, #48]	; (8001844 <__NVIC_SetPriority+0x4c>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	0112      	lsls	r2, r2, #4
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	440b      	add	r3, r1
 800181c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001820:	e00a      	b.n	8001838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4908      	ldr	r1, [pc, #32]	; (8001848 <__NVIC_SetPriority+0x50>)
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	3b04      	subs	r3, #4
 8001830:	0112      	lsls	r2, r2, #4
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	440b      	add	r3, r1
 8001836:	761a      	strb	r2, [r3, #24]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000e100 	.word	0xe000e100
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800184c:	b480      	push	{r7}
 800184e:	b089      	sub	sp, #36	; 0x24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f1c3 0307 	rsb	r3, r3, #7
 8001866:	2b04      	cmp	r3, #4
 8001868:	bf28      	it	cs
 800186a:	2304      	movcs	r3, #4
 800186c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3304      	adds	r3, #4
 8001872:	2b06      	cmp	r3, #6
 8001874:	d902      	bls.n	800187c <NVIC_EncodePriority+0x30>
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3b03      	subs	r3, #3
 800187a:	e000      	b.n	800187e <NVIC_EncodePriority+0x32>
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001880:	f04f 32ff 	mov.w	r2, #4294967295
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43da      	mvns	r2, r3
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	401a      	ands	r2, r3
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001894:	f04f 31ff 	mov.w	r1, #4294967295
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	fa01 f303 	lsl.w	r3, r1, r3
 800189e:	43d9      	mvns	r1, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a4:	4313      	orrs	r3, r2
         );
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3724      	adds	r7, #36	; 0x24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr

080018b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c0:	d301      	bcc.n	80018c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018c2:	2301      	movs	r3, #1
 80018c4:	e00f      	b.n	80018e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018c6:	4a0a      	ldr	r2, [pc, #40]	; (80018f0 <SysTick_Config+0x40>)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ce:	210f      	movs	r1, #15
 80018d0:	f04f 30ff 	mov.w	r0, #4294967295
 80018d4:	f7ff ff90 	bl	80017f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d8:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <SysTick_Config+0x40>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018de:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <SysTick_Config+0x40>)
 80018e0:	2207      	movs	r2, #7
 80018e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	e000e010 	.word	0xe000e010

080018f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff ff2d 	bl	800175c <__NVIC_SetPriorityGrouping>
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800190a:	b580      	push	{r7, lr}
 800190c:	b086      	sub	sp, #24
 800190e:	af00      	add	r7, sp, #0
 8001910:	4603      	mov	r3, r0
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
 8001916:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800191c:	f7ff ff42 	bl	80017a4 <__NVIC_GetPriorityGrouping>
 8001920:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	68b9      	ldr	r1, [r7, #8]
 8001926:	6978      	ldr	r0, [r7, #20]
 8001928:	f7ff ff90 	bl	800184c <NVIC_EncodePriority>
 800192c:	4602      	mov	r2, r0
 800192e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001932:	4611      	mov	r1, r2
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff ff5f 	bl	80017f8 <__NVIC_SetPriority>
}
 800193a:	bf00      	nop
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b082      	sub	sp, #8
 8001946:	af00      	add	r7, sp, #0
 8001948:	4603      	mov	r3, r0
 800194a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800194c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff35 	bl	80017c0 <__NVIC_EnableIRQ>
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff ffa2 	bl	80018b0 <SysTick_Config>
 800196c:	4603      	mov	r3, r0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001978:	b480      	push	{r7}
 800197a:	b08b      	sub	sp, #44	; 0x2c
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001982:	2300      	movs	r3, #0
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001986:	2300      	movs	r3, #0
 8001988:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800198a:	e148      	b.n	8001c1e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800198c:	2201      	movs	r2, #1
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	69fa      	ldr	r2, [r7, #28]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	f040 8137 	bne.w	8001c18 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	4aa3      	ldr	r2, [pc, #652]	; (8001c3c <HAL_GPIO_Init+0x2c4>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d05e      	beq.n	8001a72 <HAL_GPIO_Init+0xfa>
 80019b4:	4aa1      	ldr	r2, [pc, #644]	; (8001c3c <HAL_GPIO_Init+0x2c4>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d875      	bhi.n	8001aa6 <HAL_GPIO_Init+0x12e>
 80019ba:	4aa1      	ldr	r2, [pc, #644]	; (8001c40 <HAL_GPIO_Init+0x2c8>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d058      	beq.n	8001a72 <HAL_GPIO_Init+0xfa>
 80019c0:	4a9f      	ldr	r2, [pc, #636]	; (8001c40 <HAL_GPIO_Init+0x2c8>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d86f      	bhi.n	8001aa6 <HAL_GPIO_Init+0x12e>
 80019c6:	4a9f      	ldr	r2, [pc, #636]	; (8001c44 <HAL_GPIO_Init+0x2cc>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d052      	beq.n	8001a72 <HAL_GPIO_Init+0xfa>
 80019cc:	4a9d      	ldr	r2, [pc, #628]	; (8001c44 <HAL_GPIO_Init+0x2cc>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d869      	bhi.n	8001aa6 <HAL_GPIO_Init+0x12e>
 80019d2:	4a9d      	ldr	r2, [pc, #628]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d04c      	beq.n	8001a72 <HAL_GPIO_Init+0xfa>
 80019d8:	4a9b      	ldr	r2, [pc, #620]	; (8001c48 <HAL_GPIO_Init+0x2d0>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d863      	bhi.n	8001aa6 <HAL_GPIO_Init+0x12e>
 80019de:	4a9b      	ldr	r2, [pc, #620]	; (8001c4c <HAL_GPIO_Init+0x2d4>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d046      	beq.n	8001a72 <HAL_GPIO_Init+0xfa>
 80019e4:	4a99      	ldr	r2, [pc, #612]	; (8001c4c <HAL_GPIO_Init+0x2d4>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d85d      	bhi.n	8001aa6 <HAL_GPIO_Init+0x12e>
 80019ea:	2b12      	cmp	r3, #18
 80019ec:	d82a      	bhi.n	8001a44 <HAL_GPIO_Init+0xcc>
 80019ee:	2b12      	cmp	r3, #18
 80019f0:	d859      	bhi.n	8001aa6 <HAL_GPIO_Init+0x12e>
 80019f2:	a201      	add	r2, pc, #4	; (adr r2, 80019f8 <HAL_GPIO_Init+0x80>)
 80019f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f8:	08001a73 	.word	0x08001a73
 80019fc:	08001a4d 	.word	0x08001a4d
 8001a00:	08001a5f 	.word	0x08001a5f
 8001a04:	08001aa1 	.word	0x08001aa1
 8001a08:	08001aa7 	.word	0x08001aa7
 8001a0c:	08001aa7 	.word	0x08001aa7
 8001a10:	08001aa7 	.word	0x08001aa7
 8001a14:	08001aa7 	.word	0x08001aa7
 8001a18:	08001aa7 	.word	0x08001aa7
 8001a1c:	08001aa7 	.word	0x08001aa7
 8001a20:	08001aa7 	.word	0x08001aa7
 8001a24:	08001aa7 	.word	0x08001aa7
 8001a28:	08001aa7 	.word	0x08001aa7
 8001a2c:	08001aa7 	.word	0x08001aa7
 8001a30:	08001aa7 	.word	0x08001aa7
 8001a34:	08001aa7 	.word	0x08001aa7
 8001a38:	08001aa7 	.word	0x08001aa7
 8001a3c:	08001a55 	.word	0x08001a55
 8001a40:	08001a69 	.word	0x08001a69
 8001a44:	4a82      	ldr	r2, [pc, #520]	; (8001c50 <HAL_GPIO_Init+0x2d8>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d013      	beq.n	8001a72 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a4a:	e02c      	b.n	8001aa6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	623b      	str	r3, [r7, #32]
          break;
 8001a52:	e029      	b.n	8001aa8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	3304      	adds	r3, #4
 8001a5a:	623b      	str	r3, [r7, #32]
          break;
 8001a5c:	e024      	b.n	8001aa8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	3308      	adds	r3, #8
 8001a64:	623b      	str	r3, [r7, #32]
          break;
 8001a66:	e01f      	b.n	8001aa8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	330c      	adds	r3, #12
 8001a6e:	623b      	str	r3, [r7, #32]
          break;
 8001a70:	e01a      	b.n	8001aa8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d102      	bne.n	8001a80 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a7a:	2304      	movs	r3, #4
 8001a7c:	623b      	str	r3, [r7, #32]
          break;
 8001a7e:	e013      	b.n	8001aa8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d105      	bne.n	8001a94 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a88:	2308      	movs	r3, #8
 8001a8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	69fa      	ldr	r2, [r7, #28]
 8001a90:	611a      	str	r2, [r3, #16]
          break;
 8001a92:	e009      	b.n	8001aa8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a94:	2308      	movs	r3, #8
 8001a96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	69fa      	ldr	r2, [r7, #28]
 8001a9c:	615a      	str	r2, [r3, #20]
          break;
 8001a9e:	e003      	b.n	8001aa8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	623b      	str	r3, [r7, #32]
          break;
 8001aa4:	e000      	b.n	8001aa8 <HAL_GPIO_Init+0x130>
          break;
 8001aa6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	2bff      	cmp	r3, #255	; 0xff
 8001aac:	d801      	bhi.n	8001ab2 <HAL_GPIO_Init+0x13a>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	e001      	b.n	8001ab6 <HAL_GPIO_Init+0x13e>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	2bff      	cmp	r3, #255	; 0xff
 8001abc:	d802      	bhi.n	8001ac4 <HAL_GPIO_Init+0x14c>
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	e002      	b.n	8001aca <HAL_GPIO_Init+0x152>
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac6:	3b08      	subs	r3, #8
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	210f      	movs	r1, #15
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	401a      	ands	r2, r3
 8001adc:	6a39      	ldr	r1, [r7, #32]
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae4:	431a      	orrs	r2, r3
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f000 8090 	beq.w	8001c18 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001af8:	4b56      	ldr	r3, [pc, #344]	; (8001c54 <HAL_GPIO_Init+0x2dc>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	4a55      	ldr	r2, [pc, #340]	; (8001c54 <HAL_GPIO_Init+0x2dc>)
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	6193      	str	r3, [r2, #24]
 8001b04:	4b53      	ldr	r3, [pc, #332]	; (8001c54 <HAL_GPIO_Init+0x2dc>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b10:	4a51      	ldr	r2, [pc, #324]	; (8001c58 <HAL_GPIO_Init+0x2e0>)
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	089b      	lsrs	r3, r3, #2
 8001b16:	3302      	adds	r3, #2
 8001b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b1c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	f003 0303 	and.w	r3, r3, #3
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	220f      	movs	r2, #15
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	4013      	ands	r3, r2
 8001b32:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a49      	ldr	r2, [pc, #292]	; (8001c5c <HAL_GPIO_Init+0x2e4>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d00d      	beq.n	8001b58 <HAL_GPIO_Init+0x1e0>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a48      	ldr	r2, [pc, #288]	; (8001c60 <HAL_GPIO_Init+0x2e8>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d007      	beq.n	8001b54 <HAL_GPIO_Init+0x1dc>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a47      	ldr	r2, [pc, #284]	; (8001c64 <HAL_GPIO_Init+0x2ec>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d101      	bne.n	8001b50 <HAL_GPIO_Init+0x1d8>
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	e004      	b.n	8001b5a <HAL_GPIO_Init+0x1e2>
 8001b50:	2303      	movs	r3, #3
 8001b52:	e002      	b.n	8001b5a <HAL_GPIO_Init+0x1e2>
 8001b54:	2301      	movs	r3, #1
 8001b56:	e000      	b.n	8001b5a <HAL_GPIO_Init+0x1e2>
 8001b58:	2300      	movs	r3, #0
 8001b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b5c:	f002 0203 	and.w	r2, r2, #3
 8001b60:	0092      	lsls	r2, r2, #2
 8001b62:	4093      	lsls	r3, r2
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b6a:	493b      	ldr	r1, [pc, #236]	; (8001c58 <HAL_GPIO_Init+0x2e0>)
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	089b      	lsrs	r3, r3, #2
 8001b70:	3302      	adds	r3, #2
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d006      	beq.n	8001b92 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b84:	4b38      	ldr	r3, [pc, #224]	; (8001c68 <HAL_GPIO_Init+0x2f0>)
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	4937      	ldr	r1, [pc, #220]	; (8001c68 <HAL_GPIO_Init+0x2f0>)
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	608b      	str	r3, [r1, #8]
 8001b90:	e006      	b.n	8001ba0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b92:	4b35      	ldr	r3, [pc, #212]	; (8001c68 <HAL_GPIO_Init+0x2f0>)
 8001b94:	689a      	ldr	r2, [r3, #8]
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	4933      	ldr	r1, [pc, #204]	; (8001c68 <HAL_GPIO_Init+0x2f0>)
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d006      	beq.n	8001bba <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bac:	4b2e      	ldr	r3, [pc, #184]	; (8001c68 <HAL_GPIO_Init+0x2f0>)
 8001bae:	68da      	ldr	r2, [r3, #12]
 8001bb0:	492d      	ldr	r1, [pc, #180]	; (8001c68 <HAL_GPIO_Init+0x2f0>)
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	60cb      	str	r3, [r1, #12]
 8001bb8:	e006      	b.n	8001bc8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bba:	4b2b      	ldr	r3, [pc, #172]	; (8001c68 <HAL_GPIO_Init+0x2f0>)
 8001bbc:	68da      	ldr	r2, [r3, #12]
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	4929      	ldr	r1, [pc, #164]	; (8001c68 <HAL_GPIO_Init+0x2f0>)
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d006      	beq.n	8001be2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bd4:	4b24      	ldr	r3, [pc, #144]	; (8001c68 <HAL_GPIO_Init+0x2f0>)
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	4923      	ldr	r1, [pc, #140]	; (8001c68 <HAL_GPIO_Init+0x2f0>)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	604b      	str	r3, [r1, #4]
 8001be0:	e006      	b.n	8001bf0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001be2:	4b21      	ldr	r3, [pc, #132]	; (8001c68 <HAL_GPIO_Init+0x2f0>)
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	43db      	mvns	r3, r3
 8001bea:	491f      	ldr	r1, [pc, #124]	; (8001c68 <HAL_GPIO_Init+0x2f0>)
 8001bec:	4013      	ands	r3, r2
 8001bee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d006      	beq.n	8001c0a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bfc:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <HAL_GPIO_Init+0x2f0>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4919      	ldr	r1, [pc, #100]	; (8001c68 <HAL_GPIO_Init+0x2f0>)
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	600b      	str	r3, [r1, #0]
 8001c08:	e006      	b.n	8001c18 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c0a:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <HAL_GPIO_Init+0x2f0>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	43db      	mvns	r3, r3
 8001c12:	4915      	ldr	r1, [pc, #84]	; (8001c68 <HAL_GPIO_Init+0x2f0>)
 8001c14:	4013      	ands	r3, r2
 8001c16:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	fa22 f303 	lsr.w	r3, r2, r3
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f47f aeaf 	bne.w	800198c <HAL_GPIO_Init+0x14>
  }
}
 8001c2e:	bf00      	nop
 8001c30:	bf00      	nop
 8001c32:	372c      	adds	r7, #44	; 0x2c
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	10320000 	.word	0x10320000
 8001c40:	10310000 	.word	0x10310000
 8001c44:	10220000 	.word	0x10220000
 8001c48:	10210000 	.word	0x10210000
 8001c4c:	10120000 	.word	0x10120000
 8001c50:	10110000 	.word	0x10110000
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40010000 	.word	0x40010000
 8001c5c:	40010800 	.word	0x40010800
 8001c60:	40010c00 	.word	0x40010c00
 8001c64:	40011000 	.word	0x40011000
 8001c68:	40010400 	.word	0x40010400

08001c6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	887b      	ldrh	r3, [r7, #2]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d002      	beq.n	8001c8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c84:	2301      	movs	r3, #1
 8001c86:	73fb      	strb	r3, [r7, #15]
 8001c88:	e001      	b.n	8001c8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr

08001c9a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	807b      	strh	r3, [r7, #2]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001caa:	787b      	ldrb	r3, [r7, #1]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cb0:	887a      	ldrh	r2, [r7, #2]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cb6:	e003      	b.n	8001cc0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cb8:	887b      	ldrh	r3, [r7, #2]
 8001cba:	041a      	lsls	r2, r3, #16
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	611a      	str	r2, [r3, #16]
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr

08001cca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b085      	sub	sp, #20
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cdc:	887a      	ldrh	r2, [r7, #2]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	041a      	lsls	r2, r3, #16
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	43d9      	mvns	r1, r3
 8001ce8:	887b      	ldrh	r3, [r7, #2]
 8001cea:	400b      	ands	r3, r1
 8001cec:	431a      	orrs	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	611a      	str	r2, [r3, #16]
}
 8001cf2:	bf00      	nop
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr

08001cfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e26c      	b.n	80021e8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f000 8087 	beq.w	8001e2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d1c:	4b92      	ldr	r3, [pc, #584]	; (8001f68 <HAL_RCC_OscConfig+0x26c>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 030c 	and.w	r3, r3, #12
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	d00c      	beq.n	8001d42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d28:	4b8f      	ldr	r3, [pc, #572]	; (8001f68 <HAL_RCC_OscConfig+0x26c>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f003 030c 	and.w	r3, r3, #12
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	d112      	bne.n	8001d5a <HAL_RCC_OscConfig+0x5e>
 8001d34:	4b8c      	ldr	r3, [pc, #560]	; (8001f68 <HAL_RCC_OscConfig+0x26c>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d40:	d10b      	bne.n	8001d5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d42:	4b89      	ldr	r3, [pc, #548]	; (8001f68 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d06c      	beq.n	8001e28 <HAL_RCC_OscConfig+0x12c>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d168      	bne.n	8001e28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e246      	b.n	80021e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d62:	d106      	bne.n	8001d72 <HAL_RCC_OscConfig+0x76>
 8001d64:	4b80      	ldr	r3, [pc, #512]	; (8001f68 <HAL_RCC_OscConfig+0x26c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a7f      	ldr	r2, [pc, #508]	; (8001f68 <HAL_RCC_OscConfig+0x26c>)
 8001d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d6e:	6013      	str	r3, [r2, #0]
 8001d70:	e02e      	b.n	8001dd0 <HAL_RCC_OscConfig+0xd4>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10c      	bne.n	8001d94 <HAL_RCC_OscConfig+0x98>
 8001d7a:	4b7b      	ldr	r3, [pc, #492]	; (8001f68 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a7a      	ldr	r2, [pc, #488]	; (8001f68 <HAL_RCC_OscConfig+0x26c>)
 8001d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d84:	6013      	str	r3, [r2, #0]
 8001d86:	4b78      	ldr	r3, [pc, #480]	; (8001f68 <HAL_RCC_OscConfig+0x26c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a77      	ldr	r2, [pc, #476]	; (8001f68 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d90:	6013      	str	r3, [r2, #0]
 8001d92:	e01d      	b.n	8001dd0 <HAL_RCC_OscConfig+0xd4>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d9c:	d10c      	bne.n	8001db8 <HAL_RCC_OscConfig+0xbc>
 8001d9e:	4b72      	ldr	r3, [pc, #456]	; (8001f68 <HAL_RCC_OscConfig+0x26c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a71      	ldr	r2, [pc, #452]	; (8001f68 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	4b6f      	ldr	r3, [pc, #444]	; (8001f68 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a6e      	ldr	r2, [pc, #440]	; (8001f68 <HAL_RCC_OscConfig+0x26c>)
 8001db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	e00b      	b.n	8001dd0 <HAL_RCC_OscConfig+0xd4>
 8001db8:	4b6b      	ldr	r3, [pc, #428]	; (8001f68 <HAL_RCC_OscConfig+0x26c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a6a      	ldr	r2, [pc, #424]	; (8001f68 <HAL_RCC_OscConfig+0x26c>)
 8001dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dc2:	6013      	str	r3, [r2, #0]
 8001dc4:	4b68      	ldr	r3, [pc, #416]	; (8001f68 <HAL_RCC_OscConfig+0x26c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a67      	ldr	r2, [pc, #412]	; (8001f68 <HAL_RCC_OscConfig+0x26c>)
 8001dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d013      	beq.n	8001e00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd8:	f7ff fcb6 	bl	8001748 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001de0:	f7ff fcb2 	bl	8001748 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b64      	cmp	r3, #100	; 0x64
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e1fa      	b.n	80021e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df2:	4b5d      	ldr	r3, [pc, #372]	; (8001f68 <HAL_RCC_OscConfig+0x26c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0f0      	beq.n	8001de0 <HAL_RCC_OscConfig+0xe4>
 8001dfe:	e014      	b.n	8001e2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e00:	f7ff fca2 	bl	8001748 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e08:	f7ff fc9e 	bl	8001748 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b64      	cmp	r3, #100	; 0x64
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e1e6      	b.n	80021e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e1a:	4b53      	ldr	r3, [pc, #332]	; (8001f68 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f0      	bne.n	8001e08 <HAL_RCC_OscConfig+0x10c>
 8001e26:	e000      	b.n	8001e2a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d063      	beq.n	8001efe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e36:	4b4c      	ldr	r3, [pc, #304]	; (8001f68 <HAL_RCC_OscConfig+0x26c>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f003 030c 	and.w	r3, r3, #12
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00b      	beq.n	8001e5a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e42:	4b49      	ldr	r3, [pc, #292]	; (8001f68 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f003 030c 	and.w	r3, r3, #12
 8001e4a:	2b08      	cmp	r3, #8
 8001e4c:	d11c      	bne.n	8001e88 <HAL_RCC_OscConfig+0x18c>
 8001e4e:	4b46      	ldr	r3, [pc, #280]	; (8001f68 <HAL_RCC_OscConfig+0x26c>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d116      	bne.n	8001e88 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e5a:	4b43      	ldr	r3, [pc, #268]	; (8001f68 <HAL_RCC_OscConfig+0x26c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d005      	beq.n	8001e72 <HAL_RCC_OscConfig+0x176>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d001      	beq.n	8001e72 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e1ba      	b.n	80021e8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e72:	4b3d      	ldr	r3, [pc, #244]	; (8001f68 <HAL_RCC_OscConfig+0x26c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	4939      	ldr	r1, [pc, #228]	; (8001f68 <HAL_RCC_OscConfig+0x26c>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e86:	e03a      	b.n	8001efe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d020      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e90:	4b36      	ldr	r3, [pc, #216]	; (8001f6c <HAL_RCC_OscConfig+0x270>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e96:	f7ff fc57 	bl	8001748 <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e9e:	f7ff fc53 	bl	8001748 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e19b      	b.n	80021e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb0:	4b2d      	ldr	r3, [pc, #180]	; (8001f68 <HAL_RCC_OscConfig+0x26c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0f0      	beq.n	8001e9e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ebc:	4b2a      	ldr	r3, [pc, #168]	; (8001f68 <HAL_RCC_OscConfig+0x26c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	4927      	ldr	r1, [pc, #156]	; (8001f68 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	600b      	str	r3, [r1, #0]
 8001ed0:	e015      	b.n	8001efe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ed2:	4b26      	ldr	r3, [pc, #152]	; (8001f6c <HAL_RCC_OscConfig+0x270>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed8:	f7ff fc36 	bl	8001748 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee0:	f7ff fc32 	bl	8001748 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e17a      	b.n	80021e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ef2:	4b1d      	ldr	r3, [pc, #116]	; (8001f68 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d03a      	beq.n	8001f80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d019      	beq.n	8001f46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f12:	4b17      	ldr	r3, [pc, #92]	; (8001f70 <HAL_RCC_OscConfig+0x274>)
 8001f14:	2201      	movs	r2, #1
 8001f16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f18:	f7ff fc16 	bl	8001748 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f20:	f7ff fc12 	bl	8001748 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e15a      	b.n	80021e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f32:	4b0d      	ldr	r3, [pc, #52]	; (8001f68 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d0f0      	beq.n	8001f20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f3e:	2001      	movs	r0, #1
 8001f40:	f000 fa9a 	bl	8002478 <RCC_Delay>
 8001f44:	e01c      	b.n	8001f80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f46:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <HAL_RCC_OscConfig+0x274>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f4c:	f7ff fbfc 	bl	8001748 <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f52:	e00f      	b.n	8001f74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f54:	f7ff fbf8 	bl	8001748 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d908      	bls.n	8001f74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e140      	b.n	80021e8 <HAL_RCC_OscConfig+0x4ec>
 8001f66:	bf00      	nop
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	42420000 	.word	0x42420000
 8001f70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f74:	4b9e      	ldr	r3, [pc, #632]	; (80021f0 <HAL_RCC_OscConfig+0x4f4>)
 8001f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1e9      	bne.n	8001f54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 80a6 	beq.w	80020da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f92:	4b97      	ldr	r3, [pc, #604]	; (80021f0 <HAL_RCC_OscConfig+0x4f4>)
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10d      	bne.n	8001fba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f9e:	4b94      	ldr	r3, [pc, #592]	; (80021f0 <HAL_RCC_OscConfig+0x4f4>)
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	4a93      	ldr	r2, [pc, #588]	; (80021f0 <HAL_RCC_OscConfig+0x4f4>)
 8001fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa8:	61d3      	str	r3, [r2, #28]
 8001faa:	4b91      	ldr	r3, [pc, #580]	; (80021f0 <HAL_RCC_OscConfig+0x4f4>)
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb2:	60bb      	str	r3, [r7, #8]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fba:	4b8e      	ldr	r3, [pc, #568]	; (80021f4 <HAL_RCC_OscConfig+0x4f8>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d118      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fc6:	4b8b      	ldr	r3, [pc, #556]	; (80021f4 <HAL_RCC_OscConfig+0x4f8>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a8a      	ldr	r2, [pc, #552]	; (80021f4 <HAL_RCC_OscConfig+0x4f8>)
 8001fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fd2:	f7ff fbb9 	bl	8001748 <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fda:	f7ff fbb5 	bl	8001748 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b64      	cmp	r3, #100	; 0x64
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e0fd      	b.n	80021e8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fec:	4b81      	ldr	r3, [pc, #516]	; (80021f4 <HAL_RCC_OscConfig+0x4f8>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0f0      	beq.n	8001fda <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d106      	bne.n	800200e <HAL_RCC_OscConfig+0x312>
 8002000:	4b7b      	ldr	r3, [pc, #492]	; (80021f0 <HAL_RCC_OscConfig+0x4f4>)
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	4a7a      	ldr	r2, [pc, #488]	; (80021f0 <HAL_RCC_OscConfig+0x4f4>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	6213      	str	r3, [r2, #32]
 800200c:	e02d      	b.n	800206a <HAL_RCC_OscConfig+0x36e>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10c      	bne.n	8002030 <HAL_RCC_OscConfig+0x334>
 8002016:	4b76      	ldr	r3, [pc, #472]	; (80021f0 <HAL_RCC_OscConfig+0x4f4>)
 8002018:	6a1b      	ldr	r3, [r3, #32]
 800201a:	4a75      	ldr	r2, [pc, #468]	; (80021f0 <HAL_RCC_OscConfig+0x4f4>)
 800201c:	f023 0301 	bic.w	r3, r3, #1
 8002020:	6213      	str	r3, [r2, #32]
 8002022:	4b73      	ldr	r3, [pc, #460]	; (80021f0 <HAL_RCC_OscConfig+0x4f4>)
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	4a72      	ldr	r2, [pc, #456]	; (80021f0 <HAL_RCC_OscConfig+0x4f4>)
 8002028:	f023 0304 	bic.w	r3, r3, #4
 800202c:	6213      	str	r3, [r2, #32]
 800202e:	e01c      	b.n	800206a <HAL_RCC_OscConfig+0x36e>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	2b05      	cmp	r3, #5
 8002036:	d10c      	bne.n	8002052 <HAL_RCC_OscConfig+0x356>
 8002038:	4b6d      	ldr	r3, [pc, #436]	; (80021f0 <HAL_RCC_OscConfig+0x4f4>)
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	4a6c      	ldr	r2, [pc, #432]	; (80021f0 <HAL_RCC_OscConfig+0x4f4>)
 800203e:	f043 0304 	orr.w	r3, r3, #4
 8002042:	6213      	str	r3, [r2, #32]
 8002044:	4b6a      	ldr	r3, [pc, #424]	; (80021f0 <HAL_RCC_OscConfig+0x4f4>)
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	4a69      	ldr	r2, [pc, #420]	; (80021f0 <HAL_RCC_OscConfig+0x4f4>)
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	6213      	str	r3, [r2, #32]
 8002050:	e00b      	b.n	800206a <HAL_RCC_OscConfig+0x36e>
 8002052:	4b67      	ldr	r3, [pc, #412]	; (80021f0 <HAL_RCC_OscConfig+0x4f4>)
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	4a66      	ldr	r2, [pc, #408]	; (80021f0 <HAL_RCC_OscConfig+0x4f4>)
 8002058:	f023 0301 	bic.w	r3, r3, #1
 800205c:	6213      	str	r3, [r2, #32]
 800205e:	4b64      	ldr	r3, [pc, #400]	; (80021f0 <HAL_RCC_OscConfig+0x4f4>)
 8002060:	6a1b      	ldr	r3, [r3, #32]
 8002062:	4a63      	ldr	r2, [pc, #396]	; (80021f0 <HAL_RCC_OscConfig+0x4f4>)
 8002064:	f023 0304 	bic.w	r3, r3, #4
 8002068:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d015      	beq.n	800209e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002072:	f7ff fb69 	bl	8001748 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002078:	e00a      	b.n	8002090 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800207a:	f7ff fb65 	bl	8001748 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	f241 3288 	movw	r2, #5000	; 0x1388
 8002088:	4293      	cmp	r3, r2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e0ab      	b.n	80021e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002090:	4b57      	ldr	r3, [pc, #348]	; (80021f0 <HAL_RCC_OscConfig+0x4f4>)
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0ee      	beq.n	800207a <HAL_RCC_OscConfig+0x37e>
 800209c:	e014      	b.n	80020c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800209e:	f7ff fb53 	bl	8001748 <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a4:	e00a      	b.n	80020bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a6:	f7ff fb4f 	bl	8001748 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e095      	b.n	80021e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020bc:	4b4c      	ldr	r3, [pc, #304]	; (80021f0 <HAL_RCC_OscConfig+0x4f4>)
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1ee      	bne.n	80020a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020c8:	7dfb      	ldrb	r3, [r7, #23]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d105      	bne.n	80020da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ce:	4b48      	ldr	r3, [pc, #288]	; (80021f0 <HAL_RCC_OscConfig+0x4f4>)
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	4a47      	ldr	r2, [pc, #284]	; (80021f0 <HAL_RCC_OscConfig+0x4f4>)
 80020d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 8081 	beq.w	80021e6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020e4:	4b42      	ldr	r3, [pc, #264]	; (80021f0 <HAL_RCC_OscConfig+0x4f4>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 030c 	and.w	r3, r3, #12
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	d061      	beq.n	80021b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69db      	ldr	r3, [r3, #28]
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d146      	bne.n	8002186 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f8:	4b3f      	ldr	r3, [pc, #252]	; (80021f8 <HAL_RCC_OscConfig+0x4fc>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fe:	f7ff fb23 	bl	8001748 <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002106:	f7ff fb1f 	bl	8001748 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e067      	b.n	80021e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002118:	4b35      	ldr	r3, [pc, #212]	; (80021f0 <HAL_RCC_OscConfig+0x4f4>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1f0      	bne.n	8002106 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800212c:	d108      	bne.n	8002140 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800212e:	4b30      	ldr	r3, [pc, #192]	; (80021f0 <HAL_RCC_OscConfig+0x4f4>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	492d      	ldr	r1, [pc, #180]	; (80021f0 <HAL_RCC_OscConfig+0x4f4>)
 800213c:	4313      	orrs	r3, r2
 800213e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002140:	4b2b      	ldr	r3, [pc, #172]	; (80021f0 <HAL_RCC_OscConfig+0x4f4>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a19      	ldr	r1, [r3, #32]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002150:	430b      	orrs	r3, r1
 8002152:	4927      	ldr	r1, [pc, #156]	; (80021f0 <HAL_RCC_OscConfig+0x4f4>)
 8002154:	4313      	orrs	r3, r2
 8002156:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002158:	4b27      	ldr	r3, [pc, #156]	; (80021f8 <HAL_RCC_OscConfig+0x4fc>)
 800215a:	2201      	movs	r2, #1
 800215c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215e:	f7ff faf3 	bl	8001748 <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002166:	f7ff faef 	bl	8001748 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e037      	b.n	80021e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002178:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <HAL_RCC_OscConfig+0x4f4>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0f0      	beq.n	8002166 <HAL_RCC_OscConfig+0x46a>
 8002184:	e02f      	b.n	80021e6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002186:	4b1c      	ldr	r3, [pc, #112]	; (80021f8 <HAL_RCC_OscConfig+0x4fc>)
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218c:	f7ff fadc 	bl	8001748 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002194:	f7ff fad8 	bl	8001748 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e020      	b.n	80021e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a6:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <HAL_RCC_OscConfig+0x4f4>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f0      	bne.n	8002194 <HAL_RCC_OscConfig+0x498>
 80021b2:	e018      	b.n	80021e6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	69db      	ldr	r3, [r3, #28]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d101      	bne.n	80021c0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e013      	b.n	80021e8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021c0:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <HAL_RCC_OscConfig+0x4f4>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d106      	bne.n	80021e2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021de:	429a      	cmp	r2, r3
 80021e0:	d001      	beq.n	80021e6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e000      	b.n	80021e8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3718      	adds	r7, #24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40021000 	.word	0x40021000
 80021f4:	40007000 	.word	0x40007000
 80021f8:	42420060 	.word	0x42420060

080021fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e0d0      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002210:	4b6a      	ldr	r3, [pc, #424]	; (80023bc <HAL_RCC_ClockConfig+0x1c0>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	429a      	cmp	r2, r3
 800221c:	d910      	bls.n	8002240 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221e:	4b67      	ldr	r3, [pc, #412]	; (80023bc <HAL_RCC_ClockConfig+0x1c0>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f023 0207 	bic.w	r2, r3, #7
 8002226:	4965      	ldr	r1, [pc, #404]	; (80023bc <HAL_RCC_ClockConfig+0x1c0>)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	4313      	orrs	r3, r2
 800222c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800222e:	4b63      	ldr	r3, [pc, #396]	; (80023bc <HAL_RCC_ClockConfig+0x1c0>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	429a      	cmp	r2, r3
 800223a:	d001      	beq.n	8002240 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e0b8      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d020      	beq.n	800228e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b00      	cmp	r3, #0
 8002256:	d005      	beq.n	8002264 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002258:	4b59      	ldr	r3, [pc, #356]	; (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	4a58      	ldr	r2, [pc, #352]	; (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 800225e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002262:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0308 	and.w	r3, r3, #8
 800226c:	2b00      	cmp	r3, #0
 800226e:	d005      	beq.n	800227c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002270:	4b53      	ldr	r3, [pc, #332]	; (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	4a52      	ldr	r2, [pc, #328]	; (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002276:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800227a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800227c:	4b50      	ldr	r3, [pc, #320]	; (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	494d      	ldr	r1, [pc, #308]	; (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 800228a:	4313      	orrs	r3, r2
 800228c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d040      	beq.n	800231c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d107      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a2:	4b47      	ldr	r3, [pc, #284]	; (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d115      	bne.n	80022da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e07f      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d107      	bne.n	80022ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ba:	4b41      	ldr	r3, [pc, #260]	; (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d109      	bne.n	80022da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e073      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ca:	4b3d      	ldr	r3, [pc, #244]	; (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e06b      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022da:	4b39      	ldr	r3, [pc, #228]	; (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f023 0203 	bic.w	r2, r3, #3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	4936      	ldr	r1, [pc, #216]	; (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022ec:	f7ff fa2c 	bl	8001748 <HAL_GetTick>
 80022f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f2:	e00a      	b.n	800230a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f4:	f7ff fa28 	bl	8001748 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002302:	4293      	cmp	r3, r2
 8002304:	d901      	bls.n	800230a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e053      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800230a:	4b2d      	ldr	r3, [pc, #180]	; (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f003 020c 	and.w	r2, r3, #12
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	429a      	cmp	r2, r3
 800231a:	d1eb      	bne.n	80022f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800231c:	4b27      	ldr	r3, [pc, #156]	; (80023bc <HAL_RCC_ClockConfig+0x1c0>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	429a      	cmp	r2, r3
 8002328:	d210      	bcs.n	800234c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800232a:	4b24      	ldr	r3, [pc, #144]	; (80023bc <HAL_RCC_ClockConfig+0x1c0>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f023 0207 	bic.w	r2, r3, #7
 8002332:	4922      	ldr	r1, [pc, #136]	; (80023bc <HAL_RCC_ClockConfig+0x1c0>)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	4313      	orrs	r3, r2
 8002338:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800233a:	4b20      	ldr	r3, [pc, #128]	; (80023bc <HAL_RCC_ClockConfig+0x1c0>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	429a      	cmp	r2, r3
 8002346:	d001      	beq.n	800234c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e032      	b.n	80023b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	2b00      	cmp	r3, #0
 8002356:	d008      	beq.n	800236a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002358:	4b19      	ldr	r3, [pc, #100]	; (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	4916      	ldr	r1, [pc, #88]	; (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002366:	4313      	orrs	r3, r2
 8002368:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	2b00      	cmp	r3, #0
 8002374:	d009      	beq.n	800238a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002376:	4b12      	ldr	r3, [pc, #72]	; (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	490e      	ldr	r1, [pc, #56]	; (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002386:	4313      	orrs	r3, r2
 8002388:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800238a:	f000 f821 	bl	80023d0 <HAL_RCC_GetSysClockFreq>
 800238e:	4602      	mov	r2, r0
 8002390:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	091b      	lsrs	r3, r3, #4
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	490a      	ldr	r1, [pc, #40]	; (80023c4 <HAL_RCC_ClockConfig+0x1c8>)
 800239c:	5ccb      	ldrb	r3, [r1, r3]
 800239e:	fa22 f303 	lsr.w	r3, r2, r3
 80023a2:	4a09      	ldr	r2, [pc, #36]	; (80023c8 <HAL_RCC_ClockConfig+0x1cc>)
 80023a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023a6:	4b09      	ldr	r3, [pc, #36]	; (80023cc <HAL_RCC_ClockConfig+0x1d0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff f98a 	bl	80016c4 <HAL_InitTick>

  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40022000 	.word	0x40022000
 80023c0:	40021000 	.word	0x40021000
 80023c4:	08002cdc 	.word	0x08002cdc
 80023c8:	20000010 	.word	0x20000010
 80023cc:	20000014 	.word	0x20000014

080023d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b087      	sub	sp, #28
 80023d4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	60fb      	str	r3, [r7, #12]
 80023da:	2300      	movs	r3, #0
 80023dc:	60bb      	str	r3, [r7, #8]
 80023de:	2300      	movs	r3, #0
 80023e0:	617b      	str	r3, [r7, #20]
 80023e2:	2300      	movs	r3, #0
 80023e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023ea:	4b1e      	ldr	r3, [pc, #120]	; (8002464 <HAL_RCC_GetSysClockFreq+0x94>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f003 030c 	and.w	r3, r3, #12
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d002      	beq.n	8002400 <HAL_RCC_GetSysClockFreq+0x30>
 80023fa:	2b08      	cmp	r3, #8
 80023fc:	d003      	beq.n	8002406 <HAL_RCC_GetSysClockFreq+0x36>
 80023fe:	e027      	b.n	8002450 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002400:	4b19      	ldr	r3, [pc, #100]	; (8002468 <HAL_RCC_GetSysClockFreq+0x98>)
 8002402:	613b      	str	r3, [r7, #16]
      break;
 8002404:	e027      	b.n	8002456 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	0c9b      	lsrs	r3, r3, #18
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	4a17      	ldr	r2, [pc, #92]	; (800246c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002410:	5cd3      	ldrb	r3, [r2, r3]
 8002412:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d010      	beq.n	8002440 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800241e:	4b11      	ldr	r3, [pc, #68]	; (8002464 <HAL_RCC_GetSysClockFreq+0x94>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	0c5b      	lsrs	r3, r3, #17
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	4a11      	ldr	r2, [pc, #68]	; (8002470 <HAL_RCC_GetSysClockFreq+0xa0>)
 800242a:	5cd3      	ldrb	r3, [r2, r3]
 800242c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a0d      	ldr	r2, [pc, #52]	; (8002468 <HAL_RCC_GetSysClockFreq+0x98>)
 8002432:	fb02 f203 	mul.w	r2, r2, r3
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	fbb2 f3f3 	udiv	r3, r2, r3
 800243c:	617b      	str	r3, [r7, #20]
 800243e:	e004      	b.n	800244a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a0c      	ldr	r2, [pc, #48]	; (8002474 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002444:	fb02 f303 	mul.w	r3, r2, r3
 8002448:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	613b      	str	r3, [r7, #16]
      break;
 800244e:	e002      	b.n	8002456 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <HAL_RCC_GetSysClockFreq+0x98>)
 8002452:	613b      	str	r3, [r7, #16]
      break;
 8002454:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002456:	693b      	ldr	r3, [r7, #16]
}
 8002458:	4618      	mov	r0, r3
 800245a:	371c      	adds	r7, #28
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	40021000 	.word	0x40021000
 8002468:	007a1200 	.word	0x007a1200
 800246c:	08002cec 	.word	0x08002cec
 8002470:	08002cfc 	.word	0x08002cfc
 8002474:	003d0900 	.word	0x003d0900

08002478 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002480:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <RCC_Delay+0x34>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a0a      	ldr	r2, [pc, #40]	; (80024b0 <RCC_Delay+0x38>)
 8002486:	fba2 2303 	umull	r2, r3, r2, r3
 800248a:	0a5b      	lsrs	r3, r3, #9
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	fb02 f303 	mul.w	r3, r2, r3
 8002492:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002494:	bf00      	nop
  }
  while (Delay --);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	1e5a      	subs	r2, r3, #1
 800249a:	60fa      	str	r2, [r7, #12]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1f9      	bne.n	8002494 <RCC_Delay+0x1c>
}
 80024a0:	bf00      	nop
 80024a2:	bf00      	nop
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr
 80024ac:	20000010 	.word	0x20000010
 80024b0:	10624dd3 	.word	0x10624dd3

080024b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e041      	b.n	800254a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d106      	bne.n	80024e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7fe ff8e 	bl	80013fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2202      	movs	r2, #2
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3304      	adds	r3, #4
 80024f0:	4619      	mov	r1, r3
 80024f2:	4610      	mov	r0, r2
 80024f4:	f000 fa56 	bl	80029a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b01      	cmp	r3, #1
 8002566:	d001      	beq.n	800256c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e035      	b.n	80025d8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2202      	movs	r2, #2
 8002570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68da      	ldr	r2, [r3, #12]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0201 	orr.w	r2, r2, #1
 8002582:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a16      	ldr	r2, [pc, #88]	; (80025e4 <HAL_TIM_Base_Start_IT+0x90>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d009      	beq.n	80025a2 <HAL_TIM_Base_Start_IT+0x4e>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002596:	d004      	beq.n	80025a2 <HAL_TIM_Base_Start_IT+0x4e>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a12      	ldr	r2, [pc, #72]	; (80025e8 <HAL_TIM_Base_Start_IT+0x94>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d111      	bne.n	80025c6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2b06      	cmp	r3, #6
 80025b2:	d010      	beq.n	80025d6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0201 	orr.w	r2, r2, #1
 80025c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025c4:	e007      	b.n	80025d6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f042 0201 	orr.w	r2, r2, #1
 80025d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	40012c00 	.word	0x40012c00
 80025e8:	40000400 	.word	0x40000400

080025ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d020      	beq.n	8002650 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d01b      	beq.n	8002650 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f06f 0202 	mvn.w	r2, #2
 8002620:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f998 	bl	800296c <HAL_TIM_IC_CaptureCallback>
 800263c:	e005      	b.n	800264a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f98b 	bl	800295a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 f99a 	bl	800297e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	f003 0304 	and.w	r3, r3, #4
 8002656:	2b00      	cmp	r3, #0
 8002658:	d020      	beq.n	800269c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	d01b      	beq.n	800269c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f06f 0204 	mvn.w	r2, #4
 800266c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2202      	movs	r2, #2
 8002672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f972 	bl	800296c <HAL_TIM_IC_CaptureCallback>
 8002688:	e005      	b.n	8002696 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f965 	bl	800295a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 f974 	bl	800297e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d020      	beq.n	80026e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f003 0308 	and.w	r3, r3, #8
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d01b      	beq.n	80026e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f06f 0208 	mvn.w	r2, #8
 80026b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2204      	movs	r2, #4
 80026be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	f003 0303 	and.w	r3, r3, #3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f94c 	bl	800296c <HAL_TIM_IC_CaptureCallback>
 80026d4:	e005      	b.n	80026e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f93f 	bl	800295a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 f94e 	bl	800297e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	f003 0310 	and.w	r3, r3, #16
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d020      	beq.n	8002734 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f003 0310 	and.w	r3, r3, #16
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d01b      	beq.n	8002734 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f06f 0210 	mvn.w	r2, #16
 8002704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2208      	movs	r2, #8
 800270a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f926 	bl	800296c <HAL_TIM_IC_CaptureCallback>
 8002720:	e005      	b.n	800272e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 f919 	bl	800295a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f928 	bl	800297e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00c      	beq.n	8002758 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	d007      	beq.n	8002758 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f06f 0201 	mvn.w	r2, #1
 8002750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f7fe ff68 	bl	8001628 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00c      	beq.n	800277c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002768:	2b00      	cmp	r3, #0
 800276a:	d007      	beq.n	800277c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 fa6f 	bl	8002c5a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00c      	beq.n	80027a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800278c:	2b00      	cmp	r3, #0
 800278e:	d007      	beq.n	80027a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f8f8 	bl	8002990 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	f003 0320 	and.w	r3, r3, #32
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00c      	beq.n	80027c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f003 0320 	and.w	r3, r3, #32
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d007      	beq.n	80027c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f06f 0220 	mvn.w	r2, #32
 80027bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 fa42 	bl	8002c48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027c4:	bf00      	nop
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027d6:	2300      	movs	r3, #0
 80027d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d101      	bne.n	80027e8 <HAL_TIM_ConfigClockSource+0x1c>
 80027e4:	2302      	movs	r3, #2
 80027e6:	e0b4      	b.n	8002952 <HAL_TIM_ConfigClockSource+0x186>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2202      	movs	r2, #2
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002806:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800280e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68ba      	ldr	r2, [r7, #8]
 8002816:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002820:	d03e      	beq.n	80028a0 <HAL_TIM_ConfigClockSource+0xd4>
 8002822:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002826:	f200 8087 	bhi.w	8002938 <HAL_TIM_ConfigClockSource+0x16c>
 800282a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800282e:	f000 8086 	beq.w	800293e <HAL_TIM_ConfigClockSource+0x172>
 8002832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002836:	d87f      	bhi.n	8002938 <HAL_TIM_ConfigClockSource+0x16c>
 8002838:	2b70      	cmp	r3, #112	; 0x70
 800283a:	d01a      	beq.n	8002872 <HAL_TIM_ConfigClockSource+0xa6>
 800283c:	2b70      	cmp	r3, #112	; 0x70
 800283e:	d87b      	bhi.n	8002938 <HAL_TIM_ConfigClockSource+0x16c>
 8002840:	2b60      	cmp	r3, #96	; 0x60
 8002842:	d050      	beq.n	80028e6 <HAL_TIM_ConfigClockSource+0x11a>
 8002844:	2b60      	cmp	r3, #96	; 0x60
 8002846:	d877      	bhi.n	8002938 <HAL_TIM_ConfigClockSource+0x16c>
 8002848:	2b50      	cmp	r3, #80	; 0x50
 800284a:	d03c      	beq.n	80028c6 <HAL_TIM_ConfigClockSource+0xfa>
 800284c:	2b50      	cmp	r3, #80	; 0x50
 800284e:	d873      	bhi.n	8002938 <HAL_TIM_ConfigClockSource+0x16c>
 8002850:	2b40      	cmp	r3, #64	; 0x40
 8002852:	d058      	beq.n	8002906 <HAL_TIM_ConfigClockSource+0x13a>
 8002854:	2b40      	cmp	r3, #64	; 0x40
 8002856:	d86f      	bhi.n	8002938 <HAL_TIM_ConfigClockSource+0x16c>
 8002858:	2b30      	cmp	r3, #48	; 0x30
 800285a:	d064      	beq.n	8002926 <HAL_TIM_ConfigClockSource+0x15a>
 800285c:	2b30      	cmp	r3, #48	; 0x30
 800285e:	d86b      	bhi.n	8002938 <HAL_TIM_ConfigClockSource+0x16c>
 8002860:	2b20      	cmp	r3, #32
 8002862:	d060      	beq.n	8002926 <HAL_TIM_ConfigClockSource+0x15a>
 8002864:	2b20      	cmp	r3, #32
 8002866:	d867      	bhi.n	8002938 <HAL_TIM_ConfigClockSource+0x16c>
 8002868:	2b00      	cmp	r3, #0
 800286a:	d05c      	beq.n	8002926 <HAL_TIM_ConfigClockSource+0x15a>
 800286c:	2b10      	cmp	r3, #16
 800286e:	d05a      	beq.n	8002926 <HAL_TIM_ConfigClockSource+0x15a>
 8002870:	e062      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6818      	ldr	r0, [r3, #0]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	6899      	ldr	r1, [r3, #8]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	f000 f96a 	bl	8002b5a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002894:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	609a      	str	r2, [r3, #8]
      break;
 800289e:	e04f      	b.n	8002940 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6818      	ldr	r0, [r3, #0]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	6899      	ldr	r1, [r3, #8]
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	f000 f953 	bl	8002b5a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028c2:	609a      	str	r2, [r3, #8]
      break;
 80028c4:	e03c      	b.n	8002940 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6818      	ldr	r0, [r3, #0]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	6859      	ldr	r1, [r3, #4]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	461a      	mov	r2, r3
 80028d4:	f000 f8ca 	bl	8002a6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2150      	movs	r1, #80	; 0x50
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 f921 	bl	8002b26 <TIM_ITRx_SetConfig>
      break;
 80028e4:	e02c      	b.n	8002940 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6818      	ldr	r0, [r3, #0]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	6859      	ldr	r1, [r3, #4]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	461a      	mov	r2, r3
 80028f4:	f000 f8e8 	bl	8002ac8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2160      	movs	r1, #96	; 0x60
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 f911 	bl	8002b26 <TIM_ITRx_SetConfig>
      break;
 8002904:	e01c      	b.n	8002940 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6818      	ldr	r0, [r3, #0]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	6859      	ldr	r1, [r3, #4]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	461a      	mov	r2, r3
 8002914:	f000 f8aa 	bl	8002a6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2140      	movs	r1, #64	; 0x40
 800291e:	4618      	mov	r0, r3
 8002920:	f000 f901 	bl	8002b26 <TIM_ITRx_SetConfig>
      break;
 8002924:	e00c      	b.n	8002940 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4619      	mov	r1, r3
 8002930:	4610      	mov	r0, r2
 8002932:	f000 f8f8 	bl	8002b26 <TIM_ITRx_SetConfig>
      break;
 8002936:	e003      	b.n	8002940 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	73fb      	strb	r3, [r7, #15]
      break;
 800293c:	e000      	b.n	8002940 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800293e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002950:	7bfb      	ldrb	r3, [r7, #15]
}
 8002952:	4618      	mov	r0, r3
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr

0800296c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr

0800297e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr
	...

080029a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a2b      	ldr	r2, [pc, #172]	; (8002a64 <TIM_Base_SetConfig+0xc0>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d007      	beq.n	80029cc <TIM_Base_SetConfig+0x28>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c2:	d003      	beq.n	80029cc <TIM_Base_SetConfig+0x28>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a28      	ldr	r2, [pc, #160]	; (8002a68 <TIM_Base_SetConfig+0xc4>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d108      	bne.n	80029de <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	4313      	orrs	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a20      	ldr	r2, [pc, #128]	; (8002a64 <TIM_Base_SetConfig+0xc0>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d007      	beq.n	80029f6 <TIM_Base_SetConfig+0x52>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ec:	d003      	beq.n	80029f6 <TIM_Base_SetConfig+0x52>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a1d      	ldr	r2, [pc, #116]	; (8002a68 <TIM_Base_SetConfig+0xc4>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d108      	bne.n	8002a08 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a0d      	ldr	r2, [pc, #52]	; (8002a64 <TIM_Base_SetConfig+0xc0>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d103      	bne.n	8002a3c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	691a      	ldr	r2, [r3, #16]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d005      	beq.n	8002a5a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	f023 0201 	bic.w	r2, r3, #1
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	611a      	str	r2, [r3, #16]
  }
}
 8002a5a:	bf00      	nop
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr
 8002a64:	40012c00 	.word	0x40012c00
 8002a68:	40000400 	.word	0x40000400

08002a6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b087      	sub	sp, #28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	f023 0201 	bic.w	r2, r3, #1
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f023 030a 	bic.w	r3, r3, #10
 8002aa8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	621a      	str	r2, [r3, #32]
}
 8002abe:	bf00      	nop
 8002ac0:	371c      	adds	r7, #28
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr

08002ac8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b087      	sub	sp, #28
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	f023 0210 	bic.w	r2, r3, #16
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002af2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	031b      	lsls	r3, r3, #12
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b04:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	621a      	str	r2, [r3, #32]
}
 8002b1c:	bf00      	nop
 8002b1e:	371c      	adds	r7, #28
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr

08002b26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b085      	sub	sp, #20
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
 8002b2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	f043 0307 	orr.w	r3, r3, #7
 8002b48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	609a      	str	r2, [r3, #8]
}
 8002b50:	bf00      	nop
 8002b52:	3714      	adds	r7, #20
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bc80      	pop	{r7}
 8002b58:	4770      	bx	lr

08002b5a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b087      	sub	sp, #28
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	60f8      	str	r0, [r7, #12]
 8002b62:	60b9      	str	r1, [r7, #8]
 8002b64:	607a      	str	r2, [r7, #4]
 8002b66:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b74:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	021a      	lsls	r2, r3, #8
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	609a      	str	r2, [r3, #8]
}
 8002b8e:	bf00      	nop
 8002b90:	371c      	adds	r7, #28
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr

08002b98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d101      	bne.n	8002bb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bac:	2302      	movs	r3, #2
 8002bae:	e041      	b.n	8002c34 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2202      	movs	r2, #2
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a14      	ldr	r2, [pc, #80]	; (8002c40 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d009      	beq.n	8002c08 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bfc:	d004      	beq.n	8002c08 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a10      	ldr	r2, [pc, #64]	; (8002c44 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d10c      	bne.n	8002c22 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c0e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	40012c00 	.word	0x40012c00
 8002c44:	40000400 	.word	0x40000400

08002c48 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr

08002c5a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr

08002c6c <__libc_init_array>:
 8002c6c:	b570      	push	{r4, r5, r6, lr}
 8002c6e:	2600      	movs	r6, #0
 8002c70:	4d0c      	ldr	r5, [pc, #48]	; (8002ca4 <__libc_init_array+0x38>)
 8002c72:	4c0d      	ldr	r4, [pc, #52]	; (8002ca8 <__libc_init_array+0x3c>)
 8002c74:	1b64      	subs	r4, r4, r5
 8002c76:	10a4      	asrs	r4, r4, #2
 8002c78:	42a6      	cmp	r6, r4
 8002c7a:	d109      	bne.n	8002c90 <__libc_init_array+0x24>
 8002c7c:	f000 f822 	bl	8002cc4 <_init>
 8002c80:	2600      	movs	r6, #0
 8002c82:	4d0a      	ldr	r5, [pc, #40]	; (8002cac <__libc_init_array+0x40>)
 8002c84:	4c0a      	ldr	r4, [pc, #40]	; (8002cb0 <__libc_init_array+0x44>)
 8002c86:	1b64      	subs	r4, r4, r5
 8002c88:	10a4      	asrs	r4, r4, #2
 8002c8a:	42a6      	cmp	r6, r4
 8002c8c:	d105      	bne.n	8002c9a <__libc_init_array+0x2e>
 8002c8e:	bd70      	pop	{r4, r5, r6, pc}
 8002c90:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c94:	4798      	blx	r3
 8002c96:	3601      	adds	r6, #1
 8002c98:	e7ee      	b.n	8002c78 <__libc_init_array+0xc>
 8002c9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c9e:	4798      	blx	r3
 8002ca0:	3601      	adds	r6, #1
 8002ca2:	e7f2      	b.n	8002c8a <__libc_init_array+0x1e>
 8002ca4:	08002d00 	.word	0x08002d00
 8002ca8:	08002d00 	.word	0x08002d00
 8002cac:	08002d00 	.word	0x08002d00
 8002cb0:	08002d04 	.word	0x08002d04

08002cb4 <memset>:
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	4402      	add	r2, r0
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d100      	bne.n	8002cbe <memset+0xa>
 8002cbc:	4770      	bx	lr
 8002cbe:	f803 1b01 	strb.w	r1, [r3], #1
 8002cc2:	e7f9      	b.n	8002cb8 <memset+0x4>

08002cc4 <_init>:
 8002cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cc6:	bf00      	nop
 8002cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cca:	bc08      	pop	{r3}
 8002ccc:	469e      	mov	lr, r3
 8002cce:	4770      	bx	lr

08002cd0 <_fini>:
 8002cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cd2:	bf00      	nop
 8002cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cd6:	bc08      	pop	{r3}
 8002cd8:	469e      	mov	lr, r3
 8002cda:	4770      	bx	lr
